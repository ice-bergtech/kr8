{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"kr8+ kr8+ is an opinionated Kubernetes cluster configuration management tool designed to simplify and standardize the process of managing Kubernetes clusters. By leveraging best practices and providing a structured approach, kr8+ helps DevOps teams streamline their workflows and maintain consistency across multiple environments. kr8+ consists of: kr8+ - A Go binary for rendering manifests go-jsonnet v0.20.0 ghodss/yaml v1.0.0 Grafana/tanka helm v0.27.1 kubernetes/kompose v1.35.0 Masterminds/sprig v3 Template Library - Template Docs v3.2.3 Why use kr8+? Standardization : Ensures consistency across Kubernetes clusters, reducing errors and improving maintainability. Simplicity : Provides a straightforward approach to complex Kubernetes configurations, making it easier for teams to adopt. Scalability : Designed to support clusters of all sizes, from simple single-node setups to large-scale production environments. To get started, check out one of the following: Installation Examples Concepts Cluster concept Component Concept For documentation of the code, see the godoc directory: cmd - how kr8+ processes commands and flags pkg/jvm - how kr8+ processes jsonnet pkg/types - standard types used by kr8+ pkg/util - utility functions used by kr8+","title":"Home"},{"location":"#kr8","text":"kr8+ is an opinionated Kubernetes cluster configuration management tool designed to simplify and standardize the process of managing Kubernetes clusters. By leveraging best practices and providing a structured approach, kr8+ helps DevOps teams streamline their workflows and maintain consistency across multiple environments. kr8+ consists of: kr8+ - A Go binary for rendering manifests go-jsonnet v0.20.0 ghodss/yaml v1.0.0 Grafana/tanka helm v0.27.1 kubernetes/kompose v1.35.0 Masterminds/sprig v3 Template Library - Template Docs v3.2.3","title":"kr8+"},{"location":"#why-use-kr8","text":"Standardization : Ensures consistency across Kubernetes clusters, reducing errors and improving maintainability. Simplicity : Provides a straightforward approach to complex Kubernetes configurations, making it easier for teams to adopt. Scalability : Designed to support clusters of all sizes, from simple single-node setups to large-scale production environments. To get started, check out one of the following: Installation Examples Concepts Cluster concept Component Concept For documentation of the code, see the godoc directory: cmd - how kr8+ processes commands and flags pkg/jvm - how kr8+ processes jsonnet pkg/types - standard types used by kr8+ pkg/util - utility functions used by kr8+","title":"Why use kr8+?"},{"location":"README-repo/","text":"kr8+ kr8+ or kr8 is an opinionated Kubernetes cluster configuration management tool designed to simplify and standardize the process of managing Kubernetes clusters. By leveraging best practices and providing a structured approach, kr8+ helps DevOps teams streamline their workflows and maintain consistency across multiple environments. kr8+ is pre-1.0 . This means that breaking changes still happen from time to time, but it's stable enough for both scripting and interactive use in production environments. Releases \u00b7 Documentation \u00b7 Get Help Table of Contents - [kr8+](#kr8) - [Key Features](#key-features) - [Technical Overview](#technical-overview) - [Installation](#installation) - [Getting Started](#getting-started) - [Configuration](#configuration) - [Clusters Configurations](#clusters-configurations) - [Component Configurations](#component-configurations) - [Jsonnet Libraries](#jsonnet-libraries) - [Deployment](#deployment) - [Documentation and Additional Resources](#documentation-and-additional-resources) - [History and Theory](#history-and-theory) - [Alternatives tools](#alternatives-tools) - [Development](#development) - [Setup](#setup) - [Tests](#tests) - [Build Troubleshooting](#build-troubleshooting) - [Contributing](#contributing) - [License](#license) Key Features Cluster Configuration Management : Manage Kubernetes clusters across environments, regions, and platforms with a declarative and centralized approach. Opinionated Structure : Enforces best practices for consistent and reliable cluster configurations. Jsonnet Native Functions : Use Jsonnet to render and override component config from multiple sources such as templates, docker-compose files, Kustomize, and Helm. Extensibility : Easily extensible to meet the needs of diverse Kubernetes environments. CI/CD Friendly : Statically define all your configuration in a single source of truth, making it easy to integrate with CI/CD pipelines and deployment automation like ArgoCD. Technical Overview kr8+ consists of: kr8+ - a Go binary for rendering manifests go-jsonnet v0.20.0 ghodss/yaml v1.0.0 Grafana/tanka helm v0.27.1 kubernetes/kompose v1.35.0 Masterminds/sprig v3 Template Library v3.2.3 - Template Documentation Installation The latest version is available for download from the Github releases page To install via Homebrew, add the ice-bergtech github tap and install: brew tap ice-bergtech/tap brew install kr8 To install directly from the repo, clone and build using go 1.24.2 : git clone git@github.com:ice-bergtech/kr8.git && cd kr8 go mod download go build This will create a binary named kr8 which can be placed in your /bin of choice. Once installed, use kr8 help to show the available commands. > ./kr8 help An opinionated configuration management tool for Kubernetes Clusters powered by jsonnet Usage: kr8 [command] Available Commands: completion Generate the autocompletion script for the specified shell format Format jsonnet files generate Generate components get Display one or many kr8 resources help Help about any command init Initialize kr8 config repos, components and clusters jsonnet Jsonnet utilities render Render files version Return the current version of kr8+ Flags: -B, --base string kr8 config base directory (default \"./\") -D, --clusterdir string kr8 cluster directory --color enable colorized output. Set to false to disable (default true) -d, --componentdir string kr8 component directory --config string A config file with kr8 configuration --debug log more information about what kr8 is doing. Overrides --loglevel --ext-str-file strings Set jsonnet extvar from file contents -h, --help help for kr8 -J, --jpath stringArray Directories to add to jsonnet include path. Repeat arg for multiple directories -L, --loglevel string set log level (default \"info\") --parallel int parallelism - defaults to runtime.GOMAXPROCS(0) (default -1) Use \"kr8 [command] --help\" for more information about a command. Getting Started An working example of a repo is found at ice-bergtech/kr8-examples : git clone git@github.com:ice-bergtech/kr8-examples.git Configuration All configuration for kr8+ is written in Jsonnet . Jsonnet was chosen because it allows us to use code for configuration, while staying as close to JSON as possible. A typical repo that uses kr8+ has the following parts: Cluster Configurations Component Configurations Jsonnet Libraries Clusters Configurations A cluster is a deployment environment, organized in folders as a tree of configuration. Configuration the folders is layered on the parent folder's configuration, allowing you to override or extend configurations. Cluster Spec: types.Kr8ClusterJsonnet More information: Managing Clusters Component Configurations A component is a deployable unit that you wish to install in one or more clusters. Components can be declared multiple times within a cluster, as long as they are named distinctly when loaded. Component Spec: types.Kr8ComponentJsonnet More information: Managing Components Jsonnet Libraries Jsonnet libraries are reusable code that can be imported into your Jsonnet files. They allow you to write modular and maintainable configuration. Common libraries include: kr8-libsonnet kube-libsonnet More information: Jsonnet Libraries Deployment To generate the final configured manifests, just run kr8 generate . kr8+ reads the cluster and components configuration files and generates the final manifests based on the parameters provided. Manifest changes are checked into source control, allowing them to be ingested by tools like ArgoCD, Portainer, Rancher etc. Documentation and Additional Resources kr8+ documentation Command Documentation Concepts Managing Clusters Creating Components Native Functions Code Documentation Other Documentation Jsonnet Standard Library Jsonnet Language Reference Sprig Template Documentation History and Theory kr8+ is a fork of kr8 with some additional features and improvements. kr8 was used in production to great success at Apptio for managing components across multiple Kubernetes cluster tiers, regions, and environments. The growing need for Kubernetes Configuration Management Alternatives tools Bazel kubecfg jkcfg helm kustomize raw jsonnet Development kr8+ is coded in Golang . Currently, version 1.24.2 is used. Common tasks are described in Taskfile.yml , and can be executed with go-task . Core Dependencies Golang version 1.24 or later ( installation ) git for cloning submodules go-task for task automation golangci-lint for linting Bats for binary testing Goreleaser for release packaging Setup Once go-task is installed , you can easily setup your environment by running: # Install dev tools task setup Running Tasks # View available tasks task -l # Output: task: Available tasks for this project: * 01_setup: Instal dev tools (aliases: setup, s) * 01_setup-bats: Install bats testing tools (aliases: setup-bats) * 02_build: Build kr8+ for your local system (aliases: build, b) * 02_build-mkdocs: Uses mkdocs to build documentation site from docs (aliases: bmd) * 03_build-snapshot: Build a snapshot for all platforms using goreleaser (aliases: build-snapshot, bs) * 03_generate-bats-tests: Generate resources to test against (aliases: gt) * 03_test-go: Test kr8+ for your local system (aliases: test, t) * 03_test-package: Test compiled kr8+ binary against test inputs (aliases: test-package, tp) * 04_generate-examples: Generate example clusters and components with kr8+ (aliases: ge, gen) Other Examples # Build kr8+ for your local system task build # Run tests task test # Build snapshot task build-snapshot Tests There are a few sets of tests: Unit Tests: go test ./... or task test Integration Tests using bats : task test-package Generate examples repo: ./kr8 generate -B examples or task gen Build Troubleshooting Dependencies download fail: There is a large number of reasons why this could fail. Be sure to check: Networking problems: Check your connection to: github.com , golang.org and k8s.io . Disk space: If no space is available on the disk, this step might fail. The command go build does not start the build: Confirm you are in the correct project directory Make sure your go installation works: go --version Linting issues Linting issues are placed in lint/kr8-linting Can temporarily comment out linter checks or add exclusions in .golangci.yml Contributing We welcome contributions from the community to enhance kr8+ . Fork the repo in github and open a pull request! License The project is licensed under the MIT license . Parts of the code are derived from: kr8 - MIT License Lee Briggs - MIT License kubecfg - Apache 2.0","title":"Repo Readme"},{"location":"README-repo/#kr8","text":"kr8+ or kr8 is an opinionated Kubernetes cluster configuration management tool designed to simplify and standardize the process of managing Kubernetes clusters. By leveraging best practices and providing a structured approach, kr8+ helps DevOps teams streamline their workflows and maintain consistency across multiple environments. kr8+ is pre-1.0 . This means that breaking changes still happen from time to time, but it's stable enough for both scripting and interactive use in production environments. Releases \u00b7 Documentation \u00b7 Get Help Table of Contents - [kr8+](#kr8) - [Key Features](#key-features) - [Technical Overview](#technical-overview) - [Installation](#installation) - [Getting Started](#getting-started) - [Configuration](#configuration) - [Clusters Configurations](#clusters-configurations) - [Component Configurations](#component-configurations) - [Jsonnet Libraries](#jsonnet-libraries) - [Deployment](#deployment) - [Documentation and Additional Resources](#documentation-and-additional-resources) - [History and Theory](#history-and-theory) - [Alternatives tools](#alternatives-tools) - [Development](#development) - [Setup](#setup) - [Tests](#tests) - [Build Troubleshooting](#build-troubleshooting) - [Contributing](#contributing) - [License](#license)","title":"kr8+"},{"location":"README-repo/#key-features","text":"Cluster Configuration Management : Manage Kubernetes clusters across environments, regions, and platforms with a declarative and centralized approach. Opinionated Structure : Enforces best practices for consistent and reliable cluster configurations. Jsonnet Native Functions : Use Jsonnet to render and override component config from multiple sources such as templates, docker-compose files, Kustomize, and Helm. Extensibility : Easily extensible to meet the needs of diverse Kubernetes environments. CI/CD Friendly : Statically define all your configuration in a single source of truth, making it easy to integrate with CI/CD pipelines and deployment automation like ArgoCD.","title":"Key Features"},{"location":"README-repo/#technical-overview","text":"kr8+ consists of: kr8+ - a Go binary for rendering manifests go-jsonnet v0.20.0 ghodss/yaml v1.0.0 Grafana/tanka helm v0.27.1 kubernetes/kompose v1.35.0 Masterminds/sprig v3 Template Library v3.2.3 - Template Documentation","title":"Technical Overview"},{"location":"README-repo/#installation","text":"The latest version is available for download from the Github releases page To install via Homebrew, add the ice-bergtech github tap and install: brew tap ice-bergtech/tap brew install kr8 To install directly from the repo, clone and build using go 1.24.2 : git clone git@github.com:ice-bergtech/kr8.git && cd kr8 go mod download go build This will create a binary named kr8 which can be placed in your /bin of choice. Once installed, use kr8 help to show the available commands. > ./kr8 help An opinionated configuration management tool for Kubernetes Clusters powered by jsonnet Usage: kr8 [command] Available Commands: completion Generate the autocompletion script for the specified shell format Format jsonnet files generate Generate components get Display one or many kr8 resources help Help about any command init Initialize kr8 config repos, components and clusters jsonnet Jsonnet utilities render Render files version Return the current version of kr8+ Flags: -B, --base string kr8 config base directory (default \"./\") -D, --clusterdir string kr8 cluster directory --color enable colorized output. Set to false to disable (default true) -d, --componentdir string kr8 component directory --config string A config file with kr8 configuration --debug log more information about what kr8 is doing. Overrides --loglevel --ext-str-file strings Set jsonnet extvar from file contents -h, --help help for kr8 -J, --jpath stringArray Directories to add to jsonnet include path. Repeat arg for multiple directories -L, --loglevel string set log level (default \"info\") --parallel int parallelism - defaults to runtime.GOMAXPROCS(0) (default -1) Use \"kr8 [command] --help\" for more information about a command.","title":"Installation"},{"location":"README-repo/#getting-started","text":"An working example of a repo is found at ice-bergtech/kr8-examples : git clone git@github.com:ice-bergtech/kr8-examples.git","title":"Getting Started"},{"location":"README-repo/#configuration","text":"All configuration for kr8+ is written in Jsonnet . Jsonnet was chosen because it allows us to use code for configuration, while staying as close to JSON as possible. A typical repo that uses kr8+ has the following parts: Cluster Configurations Component Configurations Jsonnet Libraries","title":"Configuration"},{"location":"README-repo/#clusters-configurations","text":"A cluster is a deployment environment, organized in folders as a tree of configuration. Configuration the folders is layered on the parent folder's configuration, allowing you to override or extend configurations. Cluster Spec: types.Kr8ClusterJsonnet More information: Managing Clusters","title":"Clusters Configurations"},{"location":"README-repo/#component-configurations","text":"A component is a deployable unit that you wish to install in one or more clusters. Components can be declared multiple times within a cluster, as long as they are named distinctly when loaded. Component Spec: types.Kr8ComponentJsonnet More information: Managing Components","title":"Component Configurations"},{"location":"README-repo/#jsonnet-libraries","text":"Jsonnet libraries are reusable code that can be imported into your Jsonnet files. They allow you to write modular and maintainable configuration. Common libraries include: kr8-libsonnet kube-libsonnet More information: Jsonnet Libraries","title":"Jsonnet Libraries"},{"location":"README-repo/#deployment","text":"To generate the final configured manifests, just run kr8 generate . kr8+ reads the cluster and components configuration files and generates the final manifests based on the parameters provided. Manifest changes are checked into source control, allowing them to be ingested by tools like ArgoCD, Portainer, Rancher etc.","title":"Deployment"},{"location":"README-repo/#documentation-and-additional-resources","text":"kr8+ documentation Command Documentation Concepts Managing Clusters Creating Components Native Functions Code Documentation Other Documentation Jsonnet Standard Library Jsonnet Language Reference Sprig Template Documentation","title":"Documentation and Additional Resources"},{"location":"README-repo/#history-and-theory","text":"kr8+ is a fork of kr8 with some additional features and improvements. kr8 was used in production to great success at Apptio for managing components across multiple Kubernetes cluster tiers, regions, and environments. The growing need for Kubernetes Configuration Management","title":"History and Theory"},{"location":"README-repo/#alternatives-tools","text":"Bazel kubecfg jkcfg helm kustomize raw jsonnet","title":"Alternatives tools"},{"location":"README-repo/#development","text":"kr8+ is coded in Golang . Currently, version 1.24.2 is used. Common tasks are described in Taskfile.yml , and can be executed with go-task . Core Dependencies Golang version 1.24 or later ( installation ) git for cloning submodules go-task for task automation golangci-lint for linting Bats for binary testing Goreleaser for release packaging","title":"Development"},{"location":"README-repo/#setup","text":"Once go-task is installed , you can easily setup your environment by running: # Install dev tools task setup Running Tasks # View available tasks task -l # Output: task: Available tasks for this project: * 01_setup: Instal dev tools (aliases: setup, s) * 01_setup-bats: Install bats testing tools (aliases: setup-bats) * 02_build: Build kr8+ for your local system (aliases: build, b) * 02_build-mkdocs: Uses mkdocs to build documentation site from docs (aliases: bmd) * 03_build-snapshot: Build a snapshot for all platforms using goreleaser (aliases: build-snapshot, bs) * 03_generate-bats-tests: Generate resources to test against (aliases: gt) * 03_test-go: Test kr8+ for your local system (aliases: test, t) * 03_test-package: Test compiled kr8+ binary against test inputs (aliases: test-package, tp) * 04_generate-examples: Generate example clusters and components with kr8+ (aliases: ge, gen) Other Examples # Build kr8+ for your local system task build # Run tests task test # Build snapshot task build-snapshot","title":"Setup"},{"location":"README-repo/#tests","text":"There are a few sets of tests: Unit Tests: go test ./... or task test Integration Tests using bats : task test-package Generate examples repo: ./kr8 generate -B examples or task gen","title":"Tests"},{"location":"README-repo/#build-troubleshooting","text":"Dependencies download fail: There is a large number of reasons why this could fail. Be sure to check: Networking problems: Check your connection to: github.com , golang.org and k8s.io . Disk space: If no space is available on the disk, this step might fail. The command go build does not start the build: Confirm you are in the correct project directory Make sure your go installation works: go --version Linting issues Linting issues are placed in lint/kr8-linting Can temporarily comment out linter checks or add exclusions in .golangci.yml","title":"Build Troubleshooting"},{"location":"README-repo/#contributing","text":"We welcome contributions from the community to enhance kr8+ . Fork the repo in github and open a pull request!","title":"Contributing"},{"location":"README-repo/#license","text":"The project is licensed under the MIT license . Parts of the code are derived from: kr8 - MIT License Lee Briggs - MIT License kubecfg - Apache 2.0","title":"License"},{"location":"installation/","text":"Installation The kr8+ binaries can be installed via two methods: ice-bergtech/icetech Homebrew tap Github releases page Homebrew Tap This is the preferred way to install kr8+ as it ensures that all dependencies are installed correctly. brew tap \"ice-bergtech/icetech\" brew install \"kr8\" Manually via Releases kr8+ is a Go binary, which means you can simply download it from the Github releases page Build are produced for: Linux - amd64 deb, rpm, and apk Darwin - amd64 apk add kr8_$VERSION_linux_amd64.apk deb install kr8_$VERSION_linux_amd64.deb rpm install kr8_$VERSION_linux_amd64.rpm","title":"Installation"},{"location":"installation/#installation","text":"The kr8+ binaries can be installed via two methods: ice-bergtech/icetech Homebrew tap Github releases page","title":"Installation"},{"location":"installation/#homebrew-tap","text":"This is the preferred way to install kr8+ as it ensures that all dependencies are installed correctly. brew tap \"ice-bergtech/icetech\" brew install \"kr8\"","title":"Homebrew Tap"},{"location":"installation/#manually-via-releases","text":"kr8+ is a Go binary, which means you can simply download it from the Github releases page Build are produced for: Linux - amd64 deb, rpm, and apk Darwin - amd64 apk add kr8_$VERSION_linux_amd64.apk deb install kr8_$VERSION_linux_amd64.deb rpm install kr8_$VERSION_linux_amd64.rpm","title":"Manually via Releases"},{"location":"cmd/kr8/","text":"kr8 A jsonnet-powered config management tool Synopsis An opinionated configuration management tool for Kubernetes Clusters powered by jsonnet Options -B, --base string kr8 config base directory (default \"./\") -D, --clusterdir string kr8 cluster directory --color enable colorized output. Set to false to disable (default true) -d, --componentdir string kr8 component directory --config string A config file with kr8 configuration --debug log more information about what kr8 is doing. Overrides --loglevel --ext-str-file strings Set jsonnet extvar from file contents -h, --help help for kr8 -J, --jpath stringArray Directories to add to jsonnet include path. Repeat arg for multiple directories -L, --loglevel string set log level (default \"info\") --parallel int parallelism - defaults to runtime.GOMAXPROCS(0) (default -1) SEE ALSO kr8 format - Format jsonnet files kr8 generate - Generate components kr8 get - Display one or many kr8 resources kr8 init - Initialize kr8 config repos, components and clusters kr8 jsonnet - Jsonnet utilities kr8 render - Render files kr8 version - Return the current version of kr8+ Auto generated by spf13/cobra on 19-Apr-2025","title":"kr8"},{"location":"cmd/kr8/#kr8","text":"A jsonnet-powered config management tool","title":"kr8"},{"location":"cmd/kr8/#synopsis","text":"An opinionated configuration management tool for Kubernetes Clusters powered by jsonnet","title":"Synopsis"},{"location":"cmd/kr8/#options","text":"-B, --base string kr8 config base directory (default \"./\") -D, --clusterdir string kr8 cluster directory --color enable colorized output. Set to false to disable (default true) -d, --componentdir string kr8 component directory --config string A config file with kr8 configuration --debug log more information about what kr8 is doing. Overrides --loglevel --ext-str-file strings Set jsonnet extvar from file contents -h, --help help for kr8 -J, --jpath stringArray Directories to add to jsonnet include path. Repeat arg for multiple directories -L, --loglevel string set log level (default \"info\") --parallel int parallelism - defaults to runtime.GOMAXPROCS(0) (default -1)","title":"Options"},{"location":"cmd/kr8/#see-also","text":"kr8 format - Format jsonnet files kr8 generate - Generate components kr8 get - Display one or many kr8 resources kr8 init - Initialize kr8 config repos, components and clusters kr8 jsonnet - Jsonnet utilities kr8 render - Render files kr8 version - Return the current version of kr8+","title":"SEE ALSO"},{"location":"cmd/kr8/#auto-generated-by-spf13cobra-on-19-apr-2025","text":"","title":"Auto generated by spf13/cobra on 19-Apr-2025"},{"location":"cmd/kr8_format/","text":"kr8 format Format jsonnet files Synopsis Format jsonnet configuration files kr8 format [flags] Options -x, --clexcludes string filter included cluster by excluding clusters with matching cluster parameters - comma separate list of key/value conditions separated by = or ~ (for regex match) -i, --clincludes string filter included cluster by including clusters with matching cluster parameters - comma separate list of key/value conditions separated by = or ~ (for regex match) -h, --help help for format Options inherited from parent commands -B, --base string kr8 config base directory (default \"./\") -D, --clusterdir string kr8 cluster directory --color enable colorized output. Set to false to disable (default true) -d, --componentdir string kr8 component directory --config string A config file with kr8 configuration --debug log more information about what kr8 is doing. Overrides --loglevel --ext-str-file strings Set jsonnet extvar from file contents -J, --jpath stringArray Directories to add to jsonnet include path. Repeat arg for multiple directories -L, --loglevel string set log level (default \"info\") --parallel int parallelism - defaults to runtime.GOMAXPROCS(0) (default -1) SEE ALSO kr8 - A jsonnet-powered config management tool Auto generated by spf13/cobra on 19-Apr-2025","title":"kr8 format"},{"location":"cmd/kr8_format/#kr8-format","text":"Format jsonnet files","title":"kr8 format"},{"location":"cmd/kr8_format/#synopsis","text":"Format jsonnet configuration files kr8 format [flags]","title":"Synopsis"},{"location":"cmd/kr8_format/#options","text":"-x, --clexcludes string filter included cluster by excluding clusters with matching cluster parameters - comma separate list of key/value conditions separated by = or ~ (for regex match) -i, --clincludes string filter included cluster by including clusters with matching cluster parameters - comma separate list of key/value conditions separated by = or ~ (for regex match) -h, --help help for format","title":"Options"},{"location":"cmd/kr8_format/#options-inherited-from-parent-commands","text":"-B, --base string kr8 config base directory (default \"./\") -D, --clusterdir string kr8 cluster directory --color enable colorized output. Set to false to disable (default true) -d, --componentdir string kr8 component directory --config string A config file with kr8 configuration --debug log more information about what kr8 is doing. Overrides --loglevel --ext-str-file strings Set jsonnet extvar from file contents -J, --jpath stringArray Directories to add to jsonnet include path. Repeat arg for multiple directories -L, --loglevel string set log level (default \"info\") --parallel int parallelism - defaults to runtime.GOMAXPROCS(0) (default -1)","title":"Options inherited from parent commands"},{"location":"cmd/kr8_format/#see-also","text":"kr8 - A jsonnet-powered config management tool","title":"SEE ALSO"},{"location":"cmd/kr8_format/#auto-generated-by-spf13cobra-on-19-apr-2025","text":"","title":"Auto generated by spf13/cobra on 19-Apr-2025"},{"location":"cmd/kr8_generate/","text":"kr8 generate Generate components Synopsis Generate components in clusters kr8 generate [flags] Examples kr8 generate Options -x, --clexcludes string filter included cluster by excluding clusters with matching cluster parameters - comma separate list of key/value conditions separated by = or ~ (for regex match) -i, --clincludes string filter included cluster by including clusters with matching cluster parameters - comma separate list of key/value conditions separated by = or ~ (for regex match) -p, --clusterparams string provide cluster params as single file - can be combined with --cluster to override cluster -C, --clusters string clusters to generate - comma separated list of cluster names and/or regular expressions -c, --components string components to generate - comma separated list of component names and/or regular expressions -o, --generate-dir string output directory (default \"generated\") -h, --help help for generate Options inherited from parent commands -B, --base string kr8 config base directory (default \"./\") -D, --clusterdir string kr8 cluster directory --color enable colorized output. Set to false to disable (default true) -d, --componentdir string kr8 component directory --config string A config file with kr8 configuration --debug log more information about what kr8 is doing. Overrides --loglevel --ext-str-file strings Set jsonnet extvar from file contents -J, --jpath stringArray Directories to add to jsonnet include path. Repeat arg for multiple directories -L, --loglevel string set log level (default \"info\") --parallel int parallelism - defaults to runtime.GOMAXPROCS(0) (default -1) SEE ALSO kr8 - A jsonnet-powered config management tool Auto generated by spf13/cobra on 19-Apr-2025","title":"kr8 generate"},{"location":"cmd/kr8_generate/#kr8-generate","text":"Generate components","title":"kr8 generate"},{"location":"cmd/kr8_generate/#synopsis","text":"Generate components in clusters kr8 generate [flags]","title":"Synopsis"},{"location":"cmd/kr8_generate/#examples","text":"kr8 generate","title":"Examples"},{"location":"cmd/kr8_generate/#options","text":"-x, --clexcludes string filter included cluster by excluding clusters with matching cluster parameters - comma separate list of key/value conditions separated by = or ~ (for regex match) -i, --clincludes string filter included cluster by including clusters with matching cluster parameters - comma separate list of key/value conditions separated by = or ~ (for regex match) -p, --clusterparams string provide cluster params as single file - can be combined with --cluster to override cluster -C, --clusters string clusters to generate - comma separated list of cluster names and/or regular expressions -c, --components string components to generate - comma separated list of component names and/or regular expressions -o, --generate-dir string output directory (default \"generated\") -h, --help help for generate","title":"Options"},{"location":"cmd/kr8_generate/#options-inherited-from-parent-commands","text":"-B, --base string kr8 config base directory (default \"./\") -D, --clusterdir string kr8 cluster directory --color enable colorized output. Set to false to disable (default true) -d, --componentdir string kr8 component directory --config string A config file with kr8 configuration --debug log more information about what kr8 is doing. Overrides --loglevel --ext-str-file strings Set jsonnet extvar from file contents -J, --jpath stringArray Directories to add to jsonnet include path. Repeat arg for multiple directories -L, --loglevel string set log level (default \"info\") --parallel int parallelism - defaults to runtime.GOMAXPROCS(0) (default -1)","title":"Options inherited from parent commands"},{"location":"cmd/kr8_generate/#see-also","text":"kr8 - A jsonnet-powered config management tool","title":"SEE ALSO"},{"location":"cmd/kr8_generate/#auto-generated-by-spf13cobra-on-19-apr-2025","text":"","title":"Auto generated by spf13/cobra on 19-Apr-2025"},{"location":"cmd/kr8_get/","text":"kr8 get Display one or many kr8 resources Synopsis Displays information about kr8 resources such as clusters and components Options -p, --clusterparams string provide cluster params as single file - can be combined with --cluster to override cluster -h, --help help for get Options inherited from parent commands -B, --base string kr8 config base directory (default \"./\") -D, --clusterdir string kr8 cluster directory --color enable colorized output. Set to false to disable (default true) -d, --componentdir string kr8 component directory --config string A config file with kr8 configuration --debug log more information about what kr8 is doing. Overrides --loglevel --ext-str-file strings Set jsonnet extvar from file contents -J, --jpath stringArray Directories to add to jsonnet include path. Repeat arg for multiple directories -L, --loglevel string set log level (default \"info\") --parallel int parallelism - defaults to runtime.GOMAXPROCS(0) (default -1) SEE ALSO kr8 - A jsonnet-powered config management tool kr8 get clusters - Get all clusters kr8 get components - Get all components kr8 get params - Get parameter for components and clusters Auto generated by spf13/cobra on 19-Apr-2025","title":"kr8 get"},{"location":"cmd/kr8_get/#kr8-get","text":"Display one or many kr8 resources","title":"kr8 get"},{"location":"cmd/kr8_get/#synopsis","text":"Displays information about kr8 resources such as clusters and components","title":"Synopsis"},{"location":"cmd/kr8_get/#options","text":"-p, --clusterparams string provide cluster params as single file - can be combined with --cluster to override cluster -h, --help help for get","title":"Options"},{"location":"cmd/kr8_get/#options-inherited-from-parent-commands","text":"-B, --base string kr8 config base directory (default \"./\") -D, --clusterdir string kr8 cluster directory --color enable colorized output. Set to false to disable (default true) -d, --componentdir string kr8 component directory --config string A config file with kr8 configuration --debug log more information about what kr8 is doing. Overrides --loglevel --ext-str-file strings Set jsonnet extvar from file contents -J, --jpath stringArray Directories to add to jsonnet include path. Repeat arg for multiple directories -L, --loglevel string set log level (default \"info\") --parallel int parallelism - defaults to runtime.GOMAXPROCS(0) (default -1)","title":"Options inherited from parent commands"},{"location":"cmd/kr8_get/#see-also","text":"kr8 - A jsonnet-powered config management tool kr8 get clusters - Get all clusters kr8 get components - Get all components kr8 get params - Get parameter for components and clusters","title":"SEE ALSO"},{"location":"cmd/kr8_get/#auto-generated-by-spf13cobra-on-19-apr-2025","text":"","title":"Auto generated by spf13/cobra on 19-Apr-2025"},{"location":"cmd/kr8_get_clusters/","text":"kr8 get clusters Get all clusters Synopsis Get all clusters defined in kr8 config hierarchy kr8 get clusters [flags] Options -h, --help help for clusters -r, --raw If true, just prints result instead of placing in table. Options inherited from parent commands -B, --base string kr8 config base directory (default \"./\") -D, --clusterdir string kr8 cluster directory -p, --clusterparams string provide cluster params as single file - can be combined with --cluster to override cluster --color enable colorized output. Set to false to disable (default true) -d, --componentdir string kr8 component directory --config string A config file with kr8 configuration --debug log more information about what kr8 is doing. Overrides --loglevel --ext-str-file strings Set jsonnet extvar from file contents -J, --jpath stringArray Directories to add to jsonnet include path. Repeat arg for multiple directories -L, --loglevel string set log level (default \"info\") --parallel int parallelism - defaults to runtime.GOMAXPROCS(0) (default -1) SEE ALSO kr8 get - Display one or many kr8 resources Auto generated by spf13/cobra on 19-Apr-2025","title":"kr8 get clusters"},{"location":"cmd/kr8_get_clusters/#kr8-get-clusters","text":"Get all clusters","title":"kr8 get clusters"},{"location":"cmd/kr8_get_clusters/#synopsis","text":"Get all clusters defined in kr8 config hierarchy kr8 get clusters [flags]","title":"Synopsis"},{"location":"cmd/kr8_get_clusters/#options","text":"-h, --help help for clusters -r, --raw If true, just prints result instead of placing in table.","title":"Options"},{"location":"cmd/kr8_get_clusters/#options-inherited-from-parent-commands","text":"-B, --base string kr8 config base directory (default \"./\") -D, --clusterdir string kr8 cluster directory -p, --clusterparams string provide cluster params as single file - can be combined with --cluster to override cluster --color enable colorized output. Set to false to disable (default true) -d, --componentdir string kr8 component directory --config string A config file with kr8 configuration --debug log more information about what kr8 is doing. Overrides --loglevel --ext-str-file strings Set jsonnet extvar from file contents -J, --jpath stringArray Directories to add to jsonnet include path. Repeat arg for multiple directories -L, --loglevel string set log level (default \"info\") --parallel int parallelism - defaults to runtime.GOMAXPROCS(0) (default -1)","title":"Options inherited from parent commands"},{"location":"cmd/kr8_get_clusters/#see-also","text":"kr8 get - Display one or many kr8 resources","title":"SEE ALSO"},{"location":"cmd/kr8_get_clusters/#auto-generated-by-spf13cobra-on-19-apr-2025","text":"","title":"Auto generated by spf13/cobra on 19-Apr-2025"},{"location":"cmd/kr8_get_components/","text":"kr8 get components Get all components Synopsis Get all available components defined in the kr8 config hierarchy kr8 get components [flags] Options -C, --cluster string get components for cluster -h, --help help for components Options inherited from parent commands -B, --base string kr8 config base directory (default \"./\") -D, --clusterdir string kr8 cluster directory -p, --clusterparams string provide cluster params as single file - can be combined with --cluster to override cluster --color enable colorized output. Set to false to disable (default true) -d, --componentdir string kr8 component directory --config string A config file with kr8 configuration --debug log more information about what kr8 is doing. Overrides --loglevel --ext-str-file strings Set jsonnet extvar from file contents -J, --jpath stringArray Directories to add to jsonnet include path. Repeat arg for multiple directories -L, --loglevel string set log level (default \"info\") --parallel int parallelism - defaults to runtime.GOMAXPROCS(0) (default -1) SEE ALSO kr8 get - Display one or many kr8 resources Auto generated by spf13/cobra on 19-Apr-2025","title":"kr8 get components"},{"location":"cmd/kr8_get_components/#kr8-get-components","text":"Get all components","title":"kr8 get components"},{"location":"cmd/kr8_get_components/#synopsis","text":"Get all available components defined in the kr8 config hierarchy kr8 get components [flags]","title":"Synopsis"},{"location":"cmd/kr8_get_components/#options","text":"-C, --cluster string get components for cluster -h, --help help for components","title":"Options"},{"location":"cmd/kr8_get_components/#options-inherited-from-parent-commands","text":"-B, --base string kr8 config base directory (default \"./\") -D, --clusterdir string kr8 cluster directory -p, --clusterparams string provide cluster params as single file - can be combined with --cluster to override cluster --color enable colorized output. Set to false to disable (default true) -d, --componentdir string kr8 component directory --config string A config file with kr8 configuration --debug log more information about what kr8 is doing. Overrides --loglevel --ext-str-file strings Set jsonnet extvar from file contents -J, --jpath stringArray Directories to add to jsonnet include path. Repeat arg for multiple directories -L, --loglevel string set log level (default \"info\") --parallel int parallelism - defaults to runtime.GOMAXPROCS(0) (default -1)","title":"Options inherited from parent commands"},{"location":"cmd/kr8_get_components/#see-also","text":"kr8 get - Display one or many kr8 resources","title":"SEE ALSO"},{"location":"cmd/kr8_get_components/#auto-generated-by-spf13cobra-on-19-apr-2025","text":"","title":"Auto generated by spf13/cobra on 19-Apr-2025"},{"location":"cmd/kr8_get_params/","text":"kr8 get params Get parameter for components and clusters Synopsis Get parameters assigned to clusters and components in the kr8 config hierarchy kr8 get params [flags] Options -C, --cluster string get components for cluster -c, --component string component to render params for -h, --help help for params -P, --param string return value of json param from supplied path Options inherited from parent commands -B, --base string kr8 config base directory (default \"./\") -D, --clusterdir string kr8 cluster directory -p, --clusterparams string provide cluster params as single file - can be combined with --cluster to override cluster --color enable colorized output. Set to false to disable (default true) -d, --componentdir string kr8 component directory --config string A config file with kr8 configuration --debug log more information about what kr8 is doing. Overrides --loglevel --ext-str-file strings Set jsonnet extvar from file contents -J, --jpath stringArray Directories to add to jsonnet include path. Repeat arg for multiple directories -L, --loglevel string set log level (default \"info\") --parallel int parallelism - defaults to runtime.GOMAXPROCS(0) (default -1) SEE ALSO kr8 get - Display one or many kr8 resources Auto generated by spf13/cobra on 19-Apr-2025","title":"kr8 get params"},{"location":"cmd/kr8_get_params/#kr8-get-params","text":"Get parameter for components and clusters","title":"kr8 get params"},{"location":"cmd/kr8_get_params/#synopsis","text":"Get parameters assigned to clusters and components in the kr8 config hierarchy kr8 get params [flags]","title":"Synopsis"},{"location":"cmd/kr8_get_params/#options","text":"-C, --cluster string get components for cluster -c, --component string component to render params for -h, --help help for params -P, --param string return value of json param from supplied path","title":"Options"},{"location":"cmd/kr8_get_params/#options-inherited-from-parent-commands","text":"-B, --base string kr8 config base directory (default \"./\") -D, --clusterdir string kr8 cluster directory -p, --clusterparams string provide cluster params as single file - can be combined with --cluster to override cluster --color enable colorized output. Set to false to disable (default true) -d, --componentdir string kr8 component directory --config string A config file with kr8 configuration --debug log more information about what kr8 is doing. Overrides --loglevel --ext-str-file strings Set jsonnet extvar from file contents -J, --jpath stringArray Directories to add to jsonnet include path. Repeat arg for multiple directories -L, --loglevel string set log level (default \"info\") --parallel int parallelism - defaults to runtime.GOMAXPROCS(0) (default -1)","title":"Options inherited from parent commands"},{"location":"cmd/kr8_get_params/#see-also","text":"kr8 get - Display one or many kr8 resources","title":"SEE ALSO"},{"location":"cmd/kr8_get_params/#auto-generated-by-spf13cobra-on-19-apr-2025","text":"","title":"Auto generated by spf13/cobra on 19-Apr-2025"},{"location":"cmd/kr8_init/","text":"kr8 init Initialize kr8 config repos, components and clusters Synopsis kr8 requires specific directories and exists for its config to work. This init command helps in creating directory structure for repos, clusters and components Options -h, --help help for init -i, --interactive Initialize a resource interactivly Options inherited from parent commands -B, --base string kr8 config base directory (default \"./\") -D, --clusterdir string kr8 cluster directory --color enable colorized output. Set to false to disable (default true) -d, --componentdir string kr8 component directory --config string A config file with kr8 configuration --debug log more information about what kr8 is doing. Overrides --loglevel --ext-str-file strings Set jsonnet extvar from file contents -J, --jpath stringArray Directories to add to jsonnet include path. Repeat arg for multiple directories -L, --loglevel string set log level (default \"info\") --parallel int parallelism - defaults to runtime.GOMAXPROCS(0) (default -1) SEE ALSO kr8 - A jsonnet-powered config management tool kr8 init cluster - Init a new cluster config file kr8 init component - Init a new component config file kr8 init repo - Initialize a new kr8 config repo Auto generated by spf13/cobra on 19-Apr-2025","title":"kr8 init"},{"location":"cmd/kr8_init/#kr8-init","text":"Initialize kr8 config repos, components and clusters","title":"kr8 init"},{"location":"cmd/kr8_init/#synopsis","text":"kr8 requires specific directories and exists for its config to work. This init command helps in creating directory structure for repos, clusters and components","title":"Synopsis"},{"location":"cmd/kr8_init/#options","text":"-h, --help help for init -i, --interactive Initialize a resource interactivly","title":"Options"},{"location":"cmd/kr8_init/#options-inherited-from-parent-commands","text":"-B, --base string kr8 config base directory (default \"./\") -D, --clusterdir string kr8 cluster directory --color enable colorized output. Set to false to disable (default true) -d, --componentdir string kr8 component directory --config string A config file with kr8 configuration --debug log more information about what kr8 is doing. Overrides --loglevel --ext-str-file strings Set jsonnet extvar from file contents -J, --jpath stringArray Directories to add to jsonnet include path. Repeat arg for multiple directories -L, --loglevel string set log level (default \"info\") --parallel int parallelism - defaults to runtime.GOMAXPROCS(0) (default -1)","title":"Options inherited from parent commands"},{"location":"cmd/kr8_init/#see-also","text":"kr8 - A jsonnet-powered config management tool kr8 init cluster - Init a new cluster config file kr8 init component - Init a new component config file kr8 init repo - Initialize a new kr8 config repo","title":"SEE ALSO"},{"location":"cmd/kr8_init/#auto-generated-by-spf13cobra-on-19-apr-2025","text":"","title":"Auto generated by spf13/cobra on 19-Apr-2025"},{"location":"cmd/kr8_init_cluster/","text":"kr8 init cluster Init a new cluster config file Synopsis Initialize a new cluster configuration file kr8 init cluster [flags] Options -h, --help help for cluster -o, --name string Cluster name (default \"cluster-tpl\") Options inherited from parent commands -B, --base string kr8 config base directory (default \"./\") -D, --clusterdir string kr8 cluster directory --color enable colorized output. Set to false to disable (default true) -d, --componentdir string kr8 component directory --config string A config file with kr8 configuration --debug log more information about what kr8 is doing. Overrides --loglevel --ext-str-file strings Set jsonnet extvar from file contents -i, --interactive Initialize a resource interactivly -J, --jpath stringArray Directories to add to jsonnet include path. Repeat arg for multiple directories -L, --loglevel string set log level (default \"info\") --parallel int parallelism - defaults to runtime.GOMAXPROCS(0) (default -1) SEE ALSO kr8 init - Initialize kr8 config repos, components and clusters Auto generated by spf13/cobra on 19-Apr-2025","title":"kr8 init cluster"},{"location":"cmd/kr8_init_cluster/#kr8-init-cluster","text":"Init a new cluster config file","title":"kr8 init cluster"},{"location":"cmd/kr8_init_cluster/#synopsis","text":"Initialize a new cluster configuration file kr8 init cluster [flags]","title":"Synopsis"},{"location":"cmd/kr8_init_cluster/#options","text":"-h, --help help for cluster -o, --name string Cluster name (default \"cluster-tpl\")","title":"Options"},{"location":"cmd/kr8_init_cluster/#options-inherited-from-parent-commands","text":"-B, --base string kr8 config base directory (default \"./\") -D, --clusterdir string kr8 cluster directory --color enable colorized output. Set to false to disable (default true) -d, --componentdir string kr8 component directory --config string A config file with kr8 configuration --debug log more information about what kr8 is doing. Overrides --loglevel --ext-str-file strings Set jsonnet extvar from file contents -i, --interactive Initialize a resource interactivly -J, --jpath stringArray Directories to add to jsonnet include path. Repeat arg for multiple directories -L, --loglevel string set log level (default \"info\") --parallel int parallelism - defaults to runtime.GOMAXPROCS(0) (default -1)","title":"Options inherited from parent commands"},{"location":"cmd/kr8_init_cluster/#see-also","text":"kr8 init - Initialize kr8 config repos, components and clusters","title":"SEE ALSO"},{"location":"cmd/kr8_init_cluster/#auto-generated-by-spf13cobra-on-19-apr-2025","text":"","title":"Auto generated by spf13/cobra on 19-Apr-2025"},{"location":"cmd/kr8_init_component/","text":"kr8 init component Init a new component config file Synopsis Initialize a new component configuration file kr8 init component [flags] Options -h, --help help for component -o, --name string Component name (default \"component-tpl\") -t, --type jsonnet Component type, one of: [jsonnet, `yml`, `chart`] (default \"jsonnet\") Options inherited from parent commands -B, --base string kr8 config base directory (default \"./\") -D, --clusterdir string kr8 cluster directory --color enable colorized output. Set to false to disable (default true) -d, --componentdir string kr8 component directory --config string A config file with kr8 configuration --debug log more information about what kr8 is doing. Overrides --loglevel --ext-str-file strings Set jsonnet extvar from file contents -i, --interactive Initialize a resource interactivly -J, --jpath stringArray Directories to add to jsonnet include path. Repeat arg for multiple directories -L, --loglevel string set log level (default \"info\") --parallel int parallelism - defaults to runtime.GOMAXPROCS(0) (default -1) SEE ALSO kr8 init - Initialize kr8 config repos, components and clusters Auto generated by spf13/cobra on 19-Apr-2025","title":"kr8 init component"},{"location":"cmd/kr8_init_component/#kr8-init-component","text":"Init a new component config file","title":"kr8 init component"},{"location":"cmd/kr8_init_component/#synopsis","text":"Initialize a new component configuration file kr8 init component [flags]","title":"Synopsis"},{"location":"cmd/kr8_init_component/#options","text":"-h, --help help for component -o, --name string Component name (default \"component-tpl\") -t, --type jsonnet Component type, one of: [jsonnet, `yml`, `chart`] (default \"jsonnet\")","title":"Options"},{"location":"cmd/kr8_init_component/#options-inherited-from-parent-commands","text":"-B, --base string kr8 config base directory (default \"./\") -D, --clusterdir string kr8 cluster directory --color enable colorized output. Set to false to disable (default true) -d, --componentdir string kr8 component directory --config string A config file with kr8 configuration --debug log more information about what kr8 is doing. Overrides --loglevel --ext-str-file strings Set jsonnet extvar from file contents -i, --interactive Initialize a resource interactivly -J, --jpath stringArray Directories to add to jsonnet include path. Repeat arg for multiple directories -L, --loglevel string set log level (default \"info\") --parallel int parallelism - defaults to runtime.GOMAXPROCS(0) (default -1)","title":"Options inherited from parent commands"},{"location":"cmd/kr8_init_component/#see-also","text":"kr8 init - Initialize kr8 config repos, components and clusters","title":"SEE ALSO"},{"location":"cmd/kr8_init_component/#auto-generated-by-spf13cobra-on-19-apr-2025","text":"","title":"Auto generated by spf13/cobra on 19-Apr-2025"},{"location":"cmd/kr8_init_repo/","text":"kr8 init repo Initialize a new kr8 config repo Synopsis Initialize a new kr8 config repo by downloading the kr8 config skeleton repo and initialize a git repo so you can get started kr8 init repo [flags] dir Options -f, --fetch Fetch remote resources -h, --help help for repo -o, --name string Cluster name (default \"cluster-tpl\") --url string Source of skeleton directory to create repo from Options inherited from parent commands -B, --base string kr8 config base directory (default \"./\") -D, --clusterdir string kr8 cluster directory --color enable colorized output. Set to false to disable (default true) -d, --componentdir string kr8 component directory --config string A config file with kr8 configuration --debug log more information about what kr8 is doing. Overrides --loglevel --ext-str-file strings Set jsonnet extvar from file contents -i, --interactive Initialize a resource interactivly -J, --jpath stringArray Directories to add to jsonnet include path. Repeat arg for multiple directories -L, --loglevel string set log level (default \"info\") --parallel int parallelism - defaults to runtime.GOMAXPROCS(0) (default -1) SEE ALSO kr8 init - Initialize kr8 config repos, components and clusters Auto generated by spf13/cobra on 19-Apr-2025","title":"kr8 init repo"},{"location":"cmd/kr8_init_repo/#kr8-init-repo","text":"Initialize a new kr8 config repo","title":"kr8 init repo"},{"location":"cmd/kr8_init_repo/#synopsis","text":"Initialize a new kr8 config repo by downloading the kr8 config skeleton repo and initialize a git repo so you can get started kr8 init repo [flags] dir","title":"Synopsis"},{"location":"cmd/kr8_init_repo/#options","text":"-f, --fetch Fetch remote resources -h, --help help for repo -o, --name string Cluster name (default \"cluster-tpl\") --url string Source of skeleton directory to create repo from","title":"Options"},{"location":"cmd/kr8_init_repo/#options-inherited-from-parent-commands","text":"-B, --base string kr8 config base directory (default \"./\") -D, --clusterdir string kr8 cluster directory --color enable colorized output. Set to false to disable (default true) -d, --componentdir string kr8 component directory --config string A config file with kr8 configuration --debug log more information about what kr8 is doing. Overrides --loglevel --ext-str-file strings Set jsonnet extvar from file contents -i, --interactive Initialize a resource interactivly -J, --jpath stringArray Directories to add to jsonnet include path. Repeat arg for multiple directories -L, --loglevel string set log level (default \"info\") --parallel int parallelism - defaults to runtime.GOMAXPROCS(0) (default -1)","title":"Options inherited from parent commands"},{"location":"cmd/kr8_init_repo/#see-also","text":"kr8 init - Initialize kr8 config repos, components and clusters","title":"SEE ALSO"},{"location":"cmd/kr8_init_repo/#auto-generated-by-spf13cobra-on-19-apr-2025","text":"","title":"Auto generated by spf13/cobra on 19-Apr-2025"},{"location":"cmd/kr8_jsonnet/","text":"kr8 jsonnet Jsonnet utilities Synopsis Utility commands to process jsonnet Options -h, --help help for jsonnet Options inherited from parent commands -B, --base string kr8 config base directory (default \"./\") -D, --clusterdir string kr8 cluster directory --color enable colorized output. Set to false to disable (default true) -d, --componentdir string kr8 component directory --config string A config file with kr8 configuration --debug log more information about what kr8 is doing. Overrides --loglevel --ext-str-file strings Set jsonnet extvar from file contents -J, --jpath stringArray Directories to add to jsonnet include path. Repeat arg for multiple directories -L, --loglevel string set log level (default \"info\") --parallel int parallelism - defaults to runtime.GOMAXPROCS(0) (default -1) SEE ALSO kr8 - A jsonnet-powered config management tool kr8 jsonnet render - Render a jsonnet file Auto generated by spf13/cobra on 19-Apr-2025","title":"kr8 jsonnet"},{"location":"cmd/kr8_jsonnet/#kr8-jsonnet","text":"Jsonnet utilities","title":"kr8 jsonnet"},{"location":"cmd/kr8_jsonnet/#synopsis","text":"Utility commands to process jsonnet","title":"Synopsis"},{"location":"cmd/kr8_jsonnet/#options","text":"-h, --help help for jsonnet","title":"Options"},{"location":"cmd/kr8_jsonnet/#options-inherited-from-parent-commands","text":"-B, --base string kr8 config base directory (default \"./\") -D, --clusterdir string kr8 cluster directory --color enable colorized output. Set to false to disable (default true) -d, --componentdir string kr8 component directory --config string A config file with kr8 configuration --debug log more information about what kr8 is doing. Overrides --loglevel --ext-str-file strings Set jsonnet extvar from file contents -J, --jpath stringArray Directories to add to jsonnet include path. Repeat arg for multiple directories -L, --loglevel string set log level (default \"info\") --parallel int parallelism - defaults to runtime.GOMAXPROCS(0) (default -1)","title":"Options inherited from parent commands"},{"location":"cmd/kr8_jsonnet/#see-also","text":"kr8 - A jsonnet-powered config management tool kr8 jsonnet render - Render a jsonnet file","title":"SEE ALSO"},{"location":"cmd/kr8_jsonnet/#auto-generated-by-spf13cobra-on-19-apr-2025","text":"","title":"Auto generated by spf13/cobra on 19-Apr-2025"},{"location":"cmd/kr8_jsonnet_render/","text":"kr8 jsonnet render Render a jsonnet file Synopsis Render a jsonnet file to JSON or YAML kr8 jsonnet render [flags] file [file ...] Options -C, --cluster string cluster to render params for -p, --clusterparams string provide cluster params as single file - can be combined with --cluster to override cluster -c, --component string component to render params for -F, --format string Output format: json, yaml, stream (default \"json\") -h, --help help for render --prune Prune removes null and empty objects from ingested jsonnet files (default true) Options inherited from parent commands -B, --base string kr8 config base directory (default \"./\") -D, --clusterdir string kr8 cluster directory --color enable colorized output. Set to false to disable (default true) -d, --componentdir string kr8 component directory --config string A config file with kr8 configuration --debug log more information about what kr8 is doing. Overrides --loglevel --ext-str-file strings Set jsonnet extvar from file contents -J, --jpath stringArray Directories to add to jsonnet include path. Repeat arg for multiple directories -L, --loglevel string set log level (default \"info\") --parallel int parallelism - defaults to runtime.GOMAXPROCS(0) (default -1) SEE ALSO kr8 jsonnet - Jsonnet utilities Auto generated by spf13/cobra on 19-Apr-2025","title":"kr8 jsonnet render"},{"location":"cmd/kr8_jsonnet_render/#kr8-jsonnet-render","text":"Render a jsonnet file","title":"kr8 jsonnet render"},{"location":"cmd/kr8_jsonnet_render/#synopsis","text":"Render a jsonnet file to JSON or YAML kr8 jsonnet render [flags] file [file ...]","title":"Synopsis"},{"location":"cmd/kr8_jsonnet_render/#options","text":"-C, --cluster string cluster to render params for -p, --clusterparams string provide cluster params as single file - can be combined with --cluster to override cluster -c, --component string component to render params for -F, --format string Output format: json, yaml, stream (default \"json\") -h, --help help for render --prune Prune removes null and empty objects from ingested jsonnet files (default true)","title":"Options"},{"location":"cmd/kr8_jsonnet_render/#options-inherited-from-parent-commands","text":"-B, --base string kr8 config base directory (default \"./\") -D, --clusterdir string kr8 cluster directory --color enable colorized output. Set to false to disable (default true) -d, --componentdir string kr8 component directory --config string A config file with kr8 configuration --debug log more information about what kr8 is doing. Overrides --loglevel --ext-str-file strings Set jsonnet extvar from file contents -J, --jpath stringArray Directories to add to jsonnet include path. Repeat arg for multiple directories -L, --loglevel string set log level (default \"info\") --parallel int parallelism - defaults to runtime.GOMAXPROCS(0) (default -1)","title":"Options inherited from parent commands"},{"location":"cmd/kr8_jsonnet_render/#see-also","text":"kr8 jsonnet - Jsonnet utilities","title":"SEE ALSO"},{"location":"cmd/kr8_jsonnet_render/#auto-generated-by-spf13cobra-on-19-apr-2025","text":"","title":"Auto generated by spf13/cobra on 19-Apr-2025"},{"location":"cmd/kr8_render/","text":"kr8 render Render files Synopsis Render files in jsonnet or YAML Options -h, --help help for render Options inherited from parent commands -B, --base string kr8 config base directory (default \"./\") -D, --clusterdir string kr8 cluster directory --color enable colorized output. Set to false to disable (default true) -d, --componentdir string kr8 component directory --config string A config file with kr8 configuration --debug log more information about what kr8 is doing. Overrides --loglevel --ext-str-file strings Set jsonnet extvar from file contents -J, --jpath stringArray Directories to add to jsonnet include path. Repeat arg for multiple directories -L, --loglevel string set log level (default \"info\") --parallel int parallelism - defaults to runtime.GOMAXPROCS(0) (default -1) SEE ALSO kr8 - A jsonnet-powered config management tool kr8 render helm - Clean YAML stream from Helm Template output - Reads from Stdin kr8 render jsonnet - Render a jsonnet file Auto generated by spf13/cobra on 19-Apr-2025","title":"kr8 render"},{"location":"cmd/kr8_render/#kr8-render","text":"Render files","title":"kr8 render"},{"location":"cmd/kr8_render/#synopsis","text":"Render files in jsonnet or YAML","title":"Synopsis"},{"location":"cmd/kr8_render/#options","text":"-h, --help help for render","title":"Options"},{"location":"cmd/kr8_render/#options-inherited-from-parent-commands","text":"-B, --base string kr8 config base directory (default \"./\") -D, --clusterdir string kr8 cluster directory --color enable colorized output. Set to false to disable (default true) -d, --componentdir string kr8 component directory --config string A config file with kr8 configuration --debug log more information about what kr8 is doing. Overrides --loglevel --ext-str-file strings Set jsonnet extvar from file contents -J, --jpath stringArray Directories to add to jsonnet include path. Repeat arg for multiple directories -L, --loglevel string set log level (default \"info\") --parallel int parallelism - defaults to runtime.GOMAXPROCS(0) (default -1)","title":"Options inherited from parent commands"},{"location":"cmd/kr8_render/#see-also","text":"kr8 - A jsonnet-powered config management tool kr8 render helm - Clean YAML stream from Helm Template output - Reads from Stdin kr8 render jsonnet - Render a jsonnet file","title":"SEE ALSO"},{"location":"cmd/kr8_render/#auto-generated-by-spf13cobra-on-19-apr-2025","text":"","title":"Auto generated by spf13/cobra on 19-Apr-2025"},{"location":"cmd/kr8_render_helm/","text":"kr8 render helm Clean YAML stream from Helm Template output - Reads from Stdin Synopsis Removes Null YAML objects from a YAML stream kr8 render helm [flags] Options -h, --help help for helm Options inherited from parent commands -B, --base string kr8 config base directory (default \"./\") -D, --clusterdir string kr8 cluster directory --color enable colorized output. Set to false to disable (default true) -d, --componentdir string kr8 component directory --config string A config file with kr8 configuration --debug log more information about what kr8 is doing. Overrides --loglevel --ext-str-file strings Set jsonnet extvar from file contents -J, --jpath stringArray Directories to add to jsonnet include path. Repeat arg for multiple directories -L, --loglevel string set log level (default \"info\") --parallel int parallelism - defaults to runtime.GOMAXPROCS(0) (default -1) SEE ALSO kr8 render - Render files Auto generated by spf13/cobra on 19-Apr-2025","title":"kr8 render helm"},{"location":"cmd/kr8_render_helm/#kr8-render-helm","text":"Clean YAML stream from Helm Template output - Reads from Stdin","title":"kr8 render helm"},{"location":"cmd/kr8_render_helm/#synopsis","text":"Removes Null YAML objects from a YAML stream kr8 render helm [flags]","title":"Synopsis"},{"location":"cmd/kr8_render_helm/#options","text":"-h, --help help for helm","title":"Options"},{"location":"cmd/kr8_render_helm/#options-inherited-from-parent-commands","text":"-B, --base string kr8 config base directory (default \"./\") -D, --clusterdir string kr8 cluster directory --color enable colorized output. Set to false to disable (default true) -d, --componentdir string kr8 component directory --config string A config file with kr8 configuration --debug log more information about what kr8 is doing. Overrides --loglevel --ext-str-file strings Set jsonnet extvar from file contents -J, --jpath stringArray Directories to add to jsonnet include path. Repeat arg for multiple directories -L, --loglevel string set log level (default \"info\") --parallel int parallelism - defaults to runtime.GOMAXPROCS(0) (default -1)","title":"Options inherited from parent commands"},{"location":"cmd/kr8_render_helm/#see-also","text":"kr8 render - Render files","title":"SEE ALSO"},{"location":"cmd/kr8_render_helm/#auto-generated-by-spf13cobra-on-19-apr-2025","text":"","title":"Auto generated by spf13/cobra on 19-Apr-2025"},{"location":"cmd/kr8_render_jsonnet/","text":"kr8 render jsonnet Render a jsonnet file Synopsis Render a jsonnet file to JSON or YAML kr8 render jsonnet file [file ...] [flags] Options -C, --cluster string cluster to render params for -p, --clusterparams string provide cluster params as single file - can be combined with --cluster to override cluster -c, --component string component to render params for -F, --format string Output format: json, yaml, stream (default \"json\") -h, --help help for jsonnet --prune Prune null and empty objects from rendered json (default true) Options inherited from parent commands -B, --base string kr8 config base directory (default \"./\") -D, --clusterdir string kr8 cluster directory --color enable colorized output. Set to false to disable (default true) -d, --componentdir string kr8 component directory --config string A config file with kr8 configuration --debug log more information about what kr8 is doing. Overrides --loglevel --ext-str-file strings Set jsonnet extvar from file contents -J, --jpath stringArray Directories to add to jsonnet include path. Repeat arg for multiple directories -L, --loglevel string set log level (default \"info\") --parallel int parallelism - defaults to runtime.GOMAXPROCS(0) (default -1) SEE ALSO kr8 render - Render files Auto generated by spf13/cobra on 19-Apr-2025","title":"kr8 render jsonnet"},{"location":"cmd/kr8_render_jsonnet/#kr8-render-jsonnet","text":"Render a jsonnet file","title":"kr8 render jsonnet"},{"location":"cmd/kr8_render_jsonnet/#synopsis","text":"Render a jsonnet file to JSON or YAML kr8 render jsonnet file [file ...] [flags]","title":"Synopsis"},{"location":"cmd/kr8_render_jsonnet/#options","text":"-C, --cluster string cluster to render params for -p, --clusterparams string provide cluster params as single file - can be combined with --cluster to override cluster -c, --component string component to render params for -F, --format string Output format: json, yaml, stream (default \"json\") -h, --help help for jsonnet --prune Prune null and empty objects from rendered json (default true)","title":"Options"},{"location":"cmd/kr8_render_jsonnet/#options-inherited-from-parent-commands","text":"-B, --base string kr8 config base directory (default \"./\") -D, --clusterdir string kr8 cluster directory --color enable colorized output. Set to false to disable (default true) -d, --componentdir string kr8 component directory --config string A config file with kr8 configuration --debug log more information about what kr8 is doing. Overrides --loglevel --ext-str-file strings Set jsonnet extvar from file contents -J, --jpath stringArray Directories to add to jsonnet include path. Repeat arg for multiple directories -L, --loglevel string set log level (default \"info\") --parallel int parallelism - defaults to runtime.GOMAXPROCS(0) (default -1)","title":"Options inherited from parent commands"},{"location":"cmd/kr8_render_jsonnet/#see-also","text":"kr8 render - Render files","title":"SEE ALSO"},{"location":"cmd/kr8_render_jsonnet/#auto-generated-by-spf13cobra-on-19-apr-2025","text":"","title":"Auto generated by spf13/cobra on 19-Apr-2025"},{"location":"cmd/kr8_version/","text":"kr8 version Return the current version of kr8+ Synopsis return the current version of kr8+ kr8 version [flags] Options -h, --help help for version Options inherited from parent commands -B, --base string kr8 config base directory (default \"./\") -D, --clusterdir string kr8 cluster directory --color enable colorized output. Set to false to disable (default true) -d, --componentdir string kr8 component directory --config string A config file with kr8 configuration --debug log more information about what kr8 is doing. Overrides --loglevel --ext-str-file strings Set jsonnet extvar from file contents -J, --jpath stringArray Directories to add to jsonnet include path. Repeat arg for multiple directories -L, --loglevel string set log level (default \"info\") --parallel int parallelism - defaults to runtime.GOMAXPROCS(0) (default -1) SEE ALSO kr8 - A jsonnet-powered config management tool Auto generated by spf13/cobra on 19-Apr-2025","title":"kr8 version"},{"location":"cmd/kr8_version/#kr8-version","text":"Return the current version of kr8+","title":"kr8 version"},{"location":"cmd/kr8_version/#synopsis","text":"return the current version of kr8+ kr8 version [flags]","title":"Synopsis"},{"location":"cmd/kr8_version/#options","text":"-h, --help help for version","title":"Options"},{"location":"cmd/kr8_version/#options-inherited-from-parent-commands","text":"-B, --base string kr8 config base directory (default \"./\") -D, --clusterdir string kr8 cluster directory --color enable colorized output. Set to false to disable (default true) -d, --componentdir string kr8 component directory --config string A config file with kr8 configuration --debug log more information about what kr8 is doing. Overrides --loglevel --ext-str-file strings Set jsonnet extvar from file contents -J, --jpath stringArray Directories to add to jsonnet include path. Repeat arg for multiple directories -L, --loglevel string set log level (default \"info\") --parallel int parallelism - defaults to runtime.GOMAXPROCS(0) (default -1)","title":"Options inherited from parent commands"},{"location":"cmd/kr8_version/#see-also","text":"kr8 - A jsonnet-powered config management tool","title":"SEE ALSO"},{"location":"cmd/kr8_version/#auto-generated-by-spf13cobra-on-19-apr-2025","text":"","title":"Auto generated by spf13/cobra on 19-Apr-2025"},{"location":"concepts/clusters/","text":"Clusters A cluster is a deployment environment, organized as a tree of configuration. Clusters are unique and singular. They have a name which is specified via the directory structure under ./clusters by default, or the directory specified by the --clusterdir , -D flags. The cluster spec is defined as a golang struct: [docs/godoc/kr8-types.md#Kr8ClusterJsonnet] Cluster configurations are defined in a hierarchical system which is loosely inspired by Hiera from the Puppet ecosystem. An example definition for clusters might look like this: clusters \u251c\u2500\u2500 development \u2502 \u2514\u2500\u2500 dev1 \u2502 \u2514\u2500\u2500 cluster.jsonnet \u251c\u2500\u2500 params.jsonnet \u2514\u2500\u2500 production \u251c\u2500\u2500 params.jsonnet \u251c\u2500\u2500 prod1 \u2502 \u2514\u2500\u2500 cluster.jsonnet \u2514\u2500\u2500 prod2 \u2514\u2500\u2500 cluster.jsonnet The clusters are given names and then grouped together inside a directory tree. There are two jsonnet files you'll notice here: cluster.jsonnet - this defines a named cluster, kr8+ stops going down the directory tree when it finds this file params.jsonnet - this file contains components and parameters defined for clusters. We'll go into more detail about this shortly. Components in clusters Adding a component to a cluster involves add a component key to the _components key inside either the cluster.jsonnet (for cluster specific components) or the params.jsonnet (for deploy components). Here's an example: _components+: { sealed_secrets: { path: 'components/sealed_secrets' }, }, Notice we're using the jsonnet + operator to append the sealed_secrets field to the _components object. Cluster parameters Once you've initialized a component for a cluster, you can then start to override parameters for that component. You do this by simply defining a jsonnet key with the named parameters in it. Here's an example: external_dns+: { provider: 'cloudflare', txtPrefix: 'dev1', txtOwnerId: 'dev1-', domainFilters: [ 'example.com', ], tolerateMasters: false, }, Hierarchy System The hierarchy system is a very powerful part or kr8+. It allows you to remove duplication of parameter and component definitions. Take the previous cluster layout as an example: clusters \u251c\u2500\u2500 development \u2502 \u2514\u2500\u2500 dev1 \u2502 \u2514\u2500\u2500 cluster.jsonnet \u251c\u2500\u2500 params.jsonnet \u2514\u2500\u2500 production \u251c\u2500\u2500 params.jsonnet \u251c\u2500\u2500 prod1 \u2502 \u2514\u2500\u2500 cluster.jsonnet \u2514\u2500\u2500 prod2 \u2514\u2500\u2500 cluster.jsonnet You can use the hierarchy system to ensure you have components installed in all clusters. Let's assume we want to make sure that we want to install the sealed_secrets component in all our clusters. We'd put it in this file: clusters \u251c\u2500\u2500 development \u2502 \u2514\u2500\u2500 dev1 \u2502 \u2514\u2500\u2500 cluster.jsonnet \u251c\u2500\u2500 params.jsonnet <---- place component here \u2514\u2500\u2500 production \u251c\u2500\u2500 params.jsonnet \u251c\u2500\u2500 prod1 \u2502 \u2514\u2500\u2500 cluster.jsonnet \u2514\u2500\u2500 prod2 \u2514\u2500\u2500 cluster.jsonnet Alongside that, let's assume all our production clusters are using the same external_dns domain name. We can define that like so: clusters \u251c\u2500\u2500 development \u2502 \u2514\u2500\u2500 dev1 \u2502 \u2514\u2500\u2500 cluster.jsonnet \u251c\u2500\u2500 params.jsonnet \u2514\u2500\u2500 production \u251c\u2500\u2500 params.jsonnet <--- place external_dns configuration here \u251c\u2500\u2500 prod1 \u2502 \u2514\u2500\u2500 cluster.jsonnet \u2514\u2500\u2500 prod2 \u2514\u2500\u2500 cluster.jsonnet kr8+ looks for the smallest unit of configuration, so if you want one cluster to be slightly different inside a hierarchy unit, you can continue to override components and parameters inside a clusters' cluster.jsonnet file. A cluster cluster configuration file includes: _kr8_spec Configuration parameters for kr8+ | key | description | example | | ---------------------- | ----------- | ----------- | | generate_dir | | 'generated' | | generate_short_names | | true | | _cluster | Cluster configuration, which can be used as part of the Jsonnet configuration later. This consists of things like the cluster name, type, region, and other cluster specific configuration etc. |```json key description example cluster_name 'ue1-prod' cluster_type 'k8' region_name 'us-east-1' tier 'prod'","title":"Clusters"},{"location":"concepts/clusters/#clusters","text":"A cluster is a deployment environment, organized as a tree of configuration. Clusters are unique and singular. They have a name which is specified via the directory structure under ./clusters by default, or the directory specified by the --clusterdir , -D flags. The cluster spec is defined as a golang struct: [docs/godoc/kr8-types.md#Kr8ClusterJsonnet] Cluster configurations are defined in a hierarchical system which is loosely inspired by Hiera from the Puppet ecosystem. An example definition for clusters might look like this: clusters \u251c\u2500\u2500 development \u2502 \u2514\u2500\u2500 dev1 \u2502 \u2514\u2500\u2500 cluster.jsonnet \u251c\u2500\u2500 params.jsonnet \u2514\u2500\u2500 production \u251c\u2500\u2500 params.jsonnet \u251c\u2500\u2500 prod1 \u2502 \u2514\u2500\u2500 cluster.jsonnet \u2514\u2500\u2500 prod2 \u2514\u2500\u2500 cluster.jsonnet The clusters are given names and then grouped together inside a directory tree. There are two jsonnet files you'll notice here: cluster.jsonnet - this defines a named cluster, kr8+ stops going down the directory tree when it finds this file params.jsonnet - this file contains components and parameters defined for clusters. We'll go into more detail about this shortly.","title":"Clusters"},{"location":"concepts/clusters/#components-in-clusters","text":"Adding a component to a cluster involves add a component key to the _components key inside either the cluster.jsonnet (for cluster specific components) or the params.jsonnet (for deploy components). Here's an example: _components+: { sealed_secrets: { path: 'components/sealed_secrets' }, }, Notice we're using the jsonnet + operator to append the sealed_secrets field to the _components object.","title":"Components in clusters"},{"location":"concepts/clusters/#cluster-parameters","text":"Once you've initialized a component for a cluster, you can then start to override parameters for that component. You do this by simply defining a jsonnet key with the named parameters in it. Here's an example: external_dns+: { provider: 'cloudflare', txtPrefix: 'dev1', txtOwnerId: 'dev1-', domainFilters: [ 'example.com', ], tolerateMasters: false, },","title":"Cluster parameters"},{"location":"concepts/clusters/#hierarchy-system","text":"The hierarchy system is a very powerful part or kr8+. It allows you to remove duplication of parameter and component definitions. Take the previous cluster layout as an example: clusters \u251c\u2500\u2500 development \u2502 \u2514\u2500\u2500 dev1 \u2502 \u2514\u2500\u2500 cluster.jsonnet \u251c\u2500\u2500 params.jsonnet \u2514\u2500\u2500 production \u251c\u2500\u2500 params.jsonnet \u251c\u2500\u2500 prod1 \u2502 \u2514\u2500\u2500 cluster.jsonnet \u2514\u2500\u2500 prod2 \u2514\u2500\u2500 cluster.jsonnet You can use the hierarchy system to ensure you have components installed in all clusters. Let's assume we want to make sure that we want to install the sealed_secrets component in all our clusters. We'd put it in this file: clusters \u251c\u2500\u2500 development \u2502 \u2514\u2500\u2500 dev1 \u2502 \u2514\u2500\u2500 cluster.jsonnet \u251c\u2500\u2500 params.jsonnet <---- place component here \u2514\u2500\u2500 production \u251c\u2500\u2500 params.jsonnet \u251c\u2500\u2500 prod1 \u2502 \u2514\u2500\u2500 cluster.jsonnet \u2514\u2500\u2500 prod2 \u2514\u2500\u2500 cluster.jsonnet Alongside that, let's assume all our production clusters are using the same external_dns domain name. We can define that like so: clusters \u251c\u2500\u2500 development \u2502 \u2514\u2500\u2500 dev1 \u2502 \u2514\u2500\u2500 cluster.jsonnet \u251c\u2500\u2500 params.jsonnet \u2514\u2500\u2500 production \u251c\u2500\u2500 params.jsonnet <--- place external_dns configuration here \u251c\u2500\u2500 prod1 \u2502 \u2514\u2500\u2500 cluster.jsonnet \u2514\u2500\u2500 prod2 \u2514\u2500\u2500 cluster.jsonnet kr8+ looks for the smallest unit of configuration, so if you want one cluster to be slightly different inside a hierarchy unit, you can continue to override components and parameters inside a clusters' cluster.jsonnet file. A cluster cluster configuration file includes: _kr8_spec Configuration parameters for kr8+ | key | description | example | | ---------------------- | ----------- | ----------- | | generate_dir | | 'generated' | | generate_short_names | | true | | _cluster | Cluster configuration, which can be used as part of the Jsonnet configuration later. This consists of things like the cluster name, type, region, and other cluster specific configuration etc. |```json key description example cluster_name 'ue1-prod' cluster_type 'k8' region_name 'us-east-1' tier 'prod'","title":"Hierarchy System"},{"location":"concepts/components/","text":"Components A component is a deployable unit that you wish to install in one or more clusters. Components can be declared multiple times within a cluster, as long as they are named distinctly when loaded. In a kr8+ project, components are defined in ./components by default, or the directory specified by the --componentdir , -X flags. The component spec is defined as a golang struct: [docs/godoc/kr8-types.md#Kr8ComponentJsonnet] Your component might begin life before kr8+ in one of a few ways: a Helm Chart a static Kubernetes YAML/Json manifest Jsonnet describing a deployable unit template files, to generate arbitrary files from a golang-style template. a docker image or script to deploy The root directory of a component contain a file named params.jsonnet . containing configuration parameters consumed by kr8+ and passed to your Jsonnet code. Additional files can be stored alongside or in folders. This is often done to deploy multiple versions of a component at once. At a minimum a component directory contains: params.jsonnet : Contains component configuration. includes files : Files that are processed and placed in the generated output directory Often there are additional files vendor/ : Contains versioned vendor files, with each version in it's own directory Taskfile.yml : Automate component version fetching for structured updates. params.jsonnet kr8+'s most useful feature is the ability to easily layer parameters to generate a resource. The params.jsonnet file in each component can be updated at the cluster level, making it simple to customize the behavior of your component across different environments. # params.jsonnet { release_name: 'cert-manager', namespace: 'cert-manager', kr8_spec: { ... }, helm_values: { webhook: { enabled: false }, # this is a value for the helm chart }, } kr8+ extracts core configuration parameters from the kr8_spec key. The kr8_spec fields are marshaled into the Kr8ComponentSpec struct. Field Description Example namespace String. Required. The primary namespace the component should be installed in 'default' , 'argocd' release_name String. Required. Analogous to a helm release - what the component should be called when installed into a cluster 'argo-workflows' enable_kr8_allparams Bool. Optional, default False . Includes a full render of all component params during generate. Used for components that reflect properties of other components. False , True enable_kr8_allclusters Bool. Optional, default False . Includes a full render of all cluster params during generate. Used for components that reflect properties of other clusters. False , True disable_output_clean Bool. Optional, default False . If true, stops kr8+ from removing all yaml files in the output dir that were not generated False , True includes List[string or obj]. Optional, default [] . Include and process additional files. Described more below. [\"kube.jsonnet\", {file: \"resource.yaml\", dest_name: \"asdf\"}, {file: \"docs.tpl\", dest_dir: \"docs\", dest_ext: \".md\"}] extfiles {fields}. Optional, default {} . Add additional files to load as jsonnet ExtVar s. The field key is used as the variable name, and the value is the file path. {identifier: \"filename.txt\", otherfile: \"filename2.json\" } jpaths List[string]. Optional, default [] . Add additional libjsonnet paths with base dir /baseDir/componentPath/ . The path baseDir + \"/lib\" is always included. [\"vendor/argo-libsonnet/\"] Referencing files and data When generating a component, multiple types of files can be combined to generate the final component output. If the input is meant to have an output file generated, use includes If the input is data consumed by the component, use extfiles , If it's additional jsonnet libs, use jpaths includes The includes field allows you to include and process additional files. Each item in the list can be either a string (filename) or an object with specific properties. When the item is a string, it's treated as a filename to include. The output is placed in the generate_dir with the same name and .yaml extension. When the item is an object, it allows for more customization. The item is marshaled into a Kr8ComponentSpecIncludeObject struct. There are the following fields: file : The filename to include. Required. Allowed extensions: [ jsonnet , yaml , yml , tmpl , tpl ] dest_dir : The directory where the output should be placed. Optional. dest_name : The name of the output file (without extension). Optional. dest_ext : The extension of the output file. Optional. The file value must be a jsonnet , yaml , or tpl type file. For example, the includes entries: includes: [ \"filename.jsonnet\", { file: \"filename.jsonnet\", dest_dir: \"altDir\", dest_name: \"altname1\", dest_ext: \"txt\" }, { file: \"filename.jsonnet\", dest_name: \"altname2\", }, { file: \"filename.jsonnet\", dest_name: \"altname3\", dest_ext: \"txt\" }, ] Generates the files: generate_dir: \u251c\u2500\u2500 filename.jsonnet \u251c\u2500\u2500 altname2.jsonnet \u251c\u2500\u2500 altname3.txt \u2514\u2500\u2500 altDir: \u2514\u2500\u2500 altname1.txt extfiles kr8_spec.extfiles: [var_name:\"filename.jsonnet\"] This loads the specified file into the jsonnet vm external vars. These files can then be referenced in your jsonnet code using the function std.extVar(\"var_name\") variable. the file contents is made available as a string to be used in component configuration. It can be marshaled into an object using the jsonnet std.lib. jpaths kr8_spec.jpaths: [\"path/to/dir/\"] The jpaths parameter allows you to specify additional paths that kr8+ should search for components. This is useful for component-specific jsonnet libraries. In most cases, it is better to have a shared library that all components can use, but sometimes it is necessary to have a custom library for a specific component. Each directory string is passed to the jsonnet vm during processing. Taskfile A taskfile within the component directory can help manage the lifecycle of components, especially when dealing with dependencies and version management for more complex updates. A common practice is to create a fetch task that downloads all dependencies (e.g., Helm charts or static manifests). It can also perform other preparation steps like removing files or resources that are not required. These tasks are highly dependent on the particular component - for example, a component using a helm chart generally have a different set of fetch and generate tasks to a component using a static manifest. An example Taskfile might look like this: version: 3 vars: KR8_COMPONENT: kubemonkey tasks: fetch: desc: \"fetch component kubemonkey\" cmds: - curl -L https://github.com/asobti/kube-monkey/tarball/master > kubemonkey.tar.gz # download the local helm chart from the git repo - tar --strip-components=2 -xzvf kubemonkey.tar.gz asobti-kube-monkey-{{.GIT_COMMIT}}/helm # extract it - mv kubemonkey charts # place it in a charts directory - rm -fr *.tar.gz # remove the tar.gz from the repo vars: GIT_COMMIT: sh: curl -s https://api.github.com/repos/asobti/kube-monkey/commits/master | jq .sha -r | xargs git rev-parse --short Common Component Types Jsonnet A very simple component might just be a few lines of jsonnet. Consider the situation whereby you might have two clusters, one in AWS and one in DigitalOcean. You need to set a default storageclass. You could do this with jsonnet. This example is located in kr8-examples jsonnetStorageClasses . Your jsonnet component would look like this: components/doc-conepts/jsonnetStorageClasses \u251c\u2500\u2500 params.jsonnet \u2514\u2500\u2500 storageclasses.jsonnet Params As a reminder, every component requires a params file. We need to set a namespace for the component, even though it's a cluster level resource - namespace is a required paramater for kr8+. We also need to tell kr8+ what files to include for the component: { namespace: 'kube-system', release_name: 'storageclasses', kr8_spec: { includes: [ \"storageClasses.jsonnet\" ], extfiles: [ {\"echoManifest\": \"./vendor/\" + version} ] }, } Jsonnet Manifest Your jsonnet manifest looks like this: // a jsonnet external variable from kr8 that gets contains cluster-level configuration local kr8_cluster = std.extVar(\"kr8_cluster\"); // a jsonnet function for creating a storageclass local StorageClass(name, type, default=false) = { apiVersion: \"storage.k8s.io/v1\", kind: \"StorageClass\", metadata: { name: name, annotations: { \"storageclass.kubernetes.io/is-default-class\": if default then \"true\" else \"false\", }, }, parameters: { type: type, }, }; // check the cluster configuration for a type, if it's AWS make a gp2 type storageclass if kr8_cluster.cluster_type == \"aws\" then std.objectValues( { // default gp2 storage class, not tied to a zone ebs_gp2: StorageClass(\"gp2\", \"gp2\", true) {}, } ) else [] // don't make a storageclass if it's not AWS YAML Component kr8+ can use a static k8s manifest as a source input. You can then manipulate the structure of that YAML using Jsonnet. kr8+ takes care of the heavy lifting for you. This is useful when loading manifests from remote source, and you want to manipulate the resources before deploying into a cluster. An example can be found here: kr8-examples echo-test components/doc-conepts/jsonnetStorageClasses \u251c\u2500\u2500 Taskfile.yml \u251c\u2500\u2500 params.jsonnet \u251c\u2500\u2500 echo.jsonnet \u2514\u2500\u2500 vendor \u2514\u2500\u2500 {{.Version}} \u2514\u2500\u2500 echo.yml Taskfile You'll need a taskfile that downloads the original manifests for you in the fetch task. Here's an example: # https://taskfile.dev/usage version: '3' vars: NAME: external-dns REPO: 'https://kubernetes-sigs.github.io/external-dns/' tasks: default: cmds: - task: fetch-1.15 fetch-1.15: desc: \"fetch component dependencies\" vars: THING_VER: v1.15.0 cmds: - task: fetch-chart vars: { VER: '{{.THING_VER}}'} fetch-1.14: desc: \"fetch component dependencies\" vars: THING_VER: v1.14.0 cmds: - task: fetch-chart vars: { VER: '{{.THING_VER}}'} fetch-chart: desc: \"fetch a helm chart\" vars: VER: '{{default \"unset\" .VER}}' cmds: - mkdir -p ./vendor/{{.NAME}}-{{.VER}} && rm -rf ./vendor/{{.NAME}}-{{.VER}}/* - do-fetch and place resulting files in ./vendor/{{.NAME}}-{{.VER}}/ Helm kr8+ can render helm charts locally and inject parameters as helm values. This provides a great degree of flexibility when installing components into clusters. Working examples of using helm charts with kr8+ can be found in the kr8-examples repo. Processing a chart Params and chart config The params.jsonnet for a helm chart directory should include the helm values you want to use. A values file is usually a required file for a helm component. The values can be stored in a field, usually named helm_values . Here's an example: # params.jsonnet { ... # Defined a field to contains helm values helm_values: { webhook: { enabled: false }, # this is a value for the helm chart }, } The chart is be referenced and processed through the helmTemplate native function. The documentation for this native function can be found here local config = std.extVar(\"kr8\"); local helm_template = std.native(\"helmTemplate\")(config.release_name, \"./vendor/\"+\"external-dns-\"+config.chart_version, { calledFrom: std.thisFile, namespace: config.namespace, values: if \"helm_values\" in config then config.helm_values else {}, }); std.objectValues(helm_template) The values can also be stored in a separate file, and referenced via includes or extfiles configuration. Patches There are certain situations where a configuration option is not available for a helm chart. For example, you might want to add an argument that hasn't quite made it into the helm chart yet, or add something like pod affinity where it isn't actually a value option in a helm chart. kr8+ helps you in this situation by providing a mechanism to patch a helm chart. After loading the chart through the Here's an example patches.jsonnet for external-dns local config = std.extVar(\"kr8\"); local helm_template = std.native(\"helmTemplate\")(config.release_name, \"./vendor/\"+\"external-dns-\"+config.chart_version, { calledFrom: std.thisFile, namespace: config.namespace, values: if \"helm_values\" in config then config.helm_values else {}, }); [ object { metadata+: { labels+: note: \"hello\", other_thing: \"yes\" } } for object in std.objectValues(helm_template) if \"kind\" in object && object.kind != \"Secret\" // stop from committing secrets to repo ] Taskfile This is used to codify the initial chart fetch, which needs to be performed to fetch new updates and changes. An example taskfile for a helm chart might look like this: # https://taskfile.dev/usage version: '3' vars: CHART_NAME: external-dns CHART_REPO: 'https://kubernetes-sigs.github.io/external-dns/' tasks: default: cmds: - task: fetch-1.15 fetch-1.15: desc: \"fetch component dependencies\" vars: CHART_VER: v1.15.0 cmds: - task: fetch-chart vars: { VER: '{{.CHART_VER}}'} fetch-1.14: desc: \"fetch component dependencies\" vars: CHART_VER: v1.14.0 cmds: - task: fetch-chart vars: { VER: '{{.CHART_VER}}'} fetch-chart: desc: \"fetch a helm chart\" vars: VER: '{{default \"unset\" .VER}}' cmds: - mkdir -p ./vendor/{{.CHART_NAME}}-{{.VER}} && rm -rf ./vendor/{{.CHART_NAME}}-{{.VER}}/* - mkdir -p ./vendor/tmp && rm -rf ./vendor/tmp/* # add the helm repo and fetch it locally into vendor directory - helm fetch --repo {{.CHART_REPO}} --untar --untardir ./vendor/tmp --version \"{{.VER}}\" \"{{.CHART_NAME}}\" - mv ./vendor/tmp/{{.CHART_NAME}}/* ./vendor/{{.CHART_NAME}}-{{.VER}}/ && rm -rf ./vendor/tmp","title":"Components"},{"location":"concepts/components/#components","text":"A component is a deployable unit that you wish to install in one or more clusters. Components can be declared multiple times within a cluster, as long as they are named distinctly when loaded. In a kr8+ project, components are defined in ./components by default, or the directory specified by the --componentdir , -X flags. The component spec is defined as a golang struct: [docs/godoc/kr8-types.md#Kr8ComponentJsonnet] Your component might begin life before kr8+ in one of a few ways: a Helm Chart a static Kubernetes YAML/Json manifest Jsonnet describing a deployable unit template files, to generate arbitrary files from a golang-style template. a docker image or script to deploy The root directory of a component contain a file named params.jsonnet . containing configuration parameters consumed by kr8+ and passed to your Jsonnet code. Additional files can be stored alongside or in folders. This is often done to deploy multiple versions of a component at once. At a minimum a component directory contains: params.jsonnet : Contains component configuration. includes files : Files that are processed and placed in the generated output directory Often there are additional files vendor/ : Contains versioned vendor files, with each version in it's own directory Taskfile.yml : Automate component version fetching for structured updates.","title":"Components"},{"location":"concepts/components/#paramsjsonnet","text":"kr8+'s most useful feature is the ability to easily layer parameters to generate a resource. The params.jsonnet file in each component can be updated at the cluster level, making it simple to customize the behavior of your component across different environments. # params.jsonnet { release_name: 'cert-manager', namespace: 'cert-manager', kr8_spec: { ... }, helm_values: { webhook: { enabled: false }, # this is a value for the helm chart }, } kr8+ extracts core configuration parameters from the kr8_spec key. The kr8_spec fields are marshaled into the Kr8ComponentSpec struct. Field Description Example namespace String. Required. The primary namespace the component should be installed in 'default' , 'argocd' release_name String. Required. Analogous to a helm release - what the component should be called when installed into a cluster 'argo-workflows' enable_kr8_allparams Bool. Optional, default False . Includes a full render of all component params during generate. Used for components that reflect properties of other components. False , True enable_kr8_allclusters Bool. Optional, default False . Includes a full render of all cluster params during generate. Used for components that reflect properties of other clusters. False , True disable_output_clean Bool. Optional, default False . If true, stops kr8+ from removing all yaml files in the output dir that were not generated False , True includes List[string or obj]. Optional, default [] . Include and process additional files. Described more below. [\"kube.jsonnet\", {file: \"resource.yaml\", dest_name: \"asdf\"}, {file: \"docs.tpl\", dest_dir: \"docs\", dest_ext: \".md\"}] extfiles {fields}. Optional, default {} . Add additional files to load as jsonnet ExtVar s. The field key is used as the variable name, and the value is the file path. {identifier: \"filename.txt\", otherfile: \"filename2.json\" } jpaths List[string]. Optional, default [] . Add additional libjsonnet paths with base dir /baseDir/componentPath/ . The path baseDir + \"/lib\" is always included. [\"vendor/argo-libsonnet/\"]","title":"params.jsonnet"},{"location":"concepts/components/#referencing-files-and-data","text":"When generating a component, multiple types of files can be combined to generate the final component output. If the input is meant to have an output file generated, use includes If the input is data consumed by the component, use extfiles , If it's additional jsonnet libs, use jpaths","title":"Referencing files and data"},{"location":"concepts/components/#includes","text":"The includes field allows you to include and process additional files. Each item in the list can be either a string (filename) or an object with specific properties. When the item is a string, it's treated as a filename to include. The output is placed in the generate_dir with the same name and .yaml extension. When the item is an object, it allows for more customization. The item is marshaled into a Kr8ComponentSpecIncludeObject struct. There are the following fields: file : The filename to include. Required. Allowed extensions: [ jsonnet , yaml , yml , tmpl , tpl ] dest_dir : The directory where the output should be placed. Optional. dest_name : The name of the output file (without extension). Optional. dest_ext : The extension of the output file. Optional. The file value must be a jsonnet , yaml , or tpl type file. For example, the includes entries: includes: [ \"filename.jsonnet\", { file: \"filename.jsonnet\", dest_dir: \"altDir\", dest_name: \"altname1\", dest_ext: \"txt\" }, { file: \"filename.jsonnet\", dest_name: \"altname2\", }, { file: \"filename.jsonnet\", dest_name: \"altname3\", dest_ext: \"txt\" }, ] Generates the files: generate_dir: \u251c\u2500\u2500 filename.jsonnet \u251c\u2500\u2500 altname2.jsonnet \u251c\u2500\u2500 altname3.txt \u2514\u2500\u2500 altDir: \u2514\u2500\u2500 altname1.txt","title":"includes"},{"location":"concepts/components/#extfiles","text":"kr8_spec.extfiles: [var_name:\"filename.jsonnet\"] This loads the specified file into the jsonnet vm external vars. These files can then be referenced in your jsonnet code using the function std.extVar(\"var_name\") variable. the file contents is made available as a string to be used in component configuration. It can be marshaled into an object using the jsonnet std.lib.","title":"extfiles"},{"location":"concepts/components/#jpaths","text":"kr8_spec.jpaths: [\"path/to/dir/\"] The jpaths parameter allows you to specify additional paths that kr8+ should search for components. This is useful for component-specific jsonnet libraries. In most cases, it is better to have a shared library that all components can use, but sometimes it is necessary to have a custom library for a specific component. Each directory string is passed to the jsonnet vm during processing.","title":"jpaths"},{"location":"concepts/components/#taskfile","text":"A taskfile within the component directory can help manage the lifecycle of components, especially when dealing with dependencies and version management for more complex updates. A common practice is to create a fetch task that downloads all dependencies (e.g., Helm charts or static manifests). It can also perform other preparation steps like removing files or resources that are not required. These tasks are highly dependent on the particular component - for example, a component using a helm chart generally have a different set of fetch and generate tasks to a component using a static manifest. An example Taskfile might look like this: version: 3 vars: KR8_COMPONENT: kubemonkey tasks: fetch: desc: \"fetch component kubemonkey\" cmds: - curl -L https://github.com/asobti/kube-monkey/tarball/master > kubemonkey.tar.gz # download the local helm chart from the git repo - tar --strip-components=2 -xzvf kubemonkey.tar.gz asobti-kube-monkey-{{.GIT_COMMIT}}/helm # extract it - mv kubemonkey charts # place it in a charts directory - rm -fr *.tar.gz # remove the tar.gz from the repo vars: GIT_COMMIT: sh: curl -s https://api.github.com/repos/asobti/kube-monkey/commits/master | jq .sha -r | xargs git rev-parse --short","title":"Taskfile"},{"location":"concepts/components/#common-component-types","text":"","title":"Common Component Types"},{"location":"concepts/components/#jsonnet","text":"A very simple component might just be a few lines of jsonnet. Consider the situation whereby you might have two clusters, one in AWS and one in DigitalOcean. You need to set a default storageclass. You could do this with jsonnet. This example is located in kr8-examples jsonnetStorageClasses . Your jsonnet component would look like this: components/doc-conepts/jsonnetStorageClasses \u251c\u2500\u2500 params.jsonnet \u2514\u2500\u2500 storageclasses.jsonnet","title":"Jsonnet"},{"location":"concepts/components/#params","text":"As a reminder, every component requires a params file. We need to set a namespace for the component, even though it's a cluster level resource - namespace is a required paramater for kr8+. We also need to tell kr8+ what files to include for the component: { namespace: 'kube-system', release_name: 'storageclasses', kr8_spec: { includes: [ \"storageClasses.jsonnet\" ], extfiles: [ {\"echoManifest\": \"./vendor/\" + version} ] }, }","title":"Params"},{"location":"concepts/components/#jsonnet-manifest","text":"Your jsonnet manifest looks like this: // a jsonnet external variable from kr8 that gets contains cluster-level configuration local kr8_cluster = std.extVar(\"kr8_cluster\"); // a jsonnet function for creating a storageclass local StorageClass(name, type, default=false) = { apiVersion: \"storage.k8s.io/v1\", kind: \"StorageClass\", metadata: { name: name, annotations: { \"storageclass.kubernetes.io/is-default-class\": if default then \"true\" else \"false\", }, }, parameters: { type: type, }, }; // check the cluster configuration for a type, if it's AWS make a gp2 type storageclass if kr8_cluster.cluster_type == \"aws\" then std.objectValues( { // default gp2 storage class, not tied to a zone ebs_gp2: StorageClass(\"gp2\", \"gp2\", true) {}, } ) else [] // don't make a storageclass if it's not AWS","title":"Jsonnet Manifest"},{"location":"concepts/components/#yaml-component","text":"kr8+ can use a static k8s manifest as a source input. You can then manipulate the structure of that YAML using Jsonnet. kr8+ takes care of the heavy lifting for you. This is useful when loading manifests from remote source, and you want to manipulate the resources before deploying into a cluster. An example can be found here: kr8-examples echo-test components/doc-conepts/jsonnetStorageClasses \u251c\u2500\u2500 Taskfile.yml \u251c\u2500\u2500 params.jsonnet \u251c\u2500\u2500 echo.jsonnet \u2514\u2500\u2500 vendor \u2514\u2500\u2500 {{.Version}} \u2514\u2500\u2500 echo.yml","title":"YAML Component"},{"location":"concepts/components/#taskfile_1","text":"You'll need a taskfile that downloads the original manifests for you in the fetch task. Here's an example: # https://taskfile.dev/usage version: '3' vars: NAME: external-dns REPO: 'https://kubernetes-sigs.github.io/external-dns/' tasks: default: cmds: - task: fetch-1.15 fetch-1.15: desc: \"fetch component dependencies\" vars: THING_VER: v1.15.0 cmds: - task: fetch-chart vars: { VER: '{{.THING_VER}}'} fetch-1.14: desc: \"fetch component dependencies\" vars: THING_VER: v1.14.0 cmds: - task: fetch-chart vars: { VER: '{{.THING_VER}}'} fetch-chart: desc: \"fetch a helm chart\" vars: VER: '{{default \"unset\" .VER}}' cmds: - mkdir -p ./vendor/{{.NAME}}-{{.VER}} && rm -rf ./vendor/{{.NAME}}-{{.VER}}/* - do-fetch and place resulting files in ./vendor/{{.NAME}}-{{.VER}}/","title":"Taskfile"},{"location":"concepts/components/#helm","text":"kr8+ can render helm charts locally and inject parameters as helm values. This provides a great degree of flexibility when installing components into clusters. Working examples of using helm charts with kr8+ can be found in the kr8-examples repo.","title":"Helm"},{"location":"concepts/components/#processing-a-chart","text":"","title":"Processing a chart"},{"location":"concepts/components/#params-and-chart-config","text":"The params.jsonnet for a helm chart directory should include the helm values you want to use. A values file is usually a required file for a helm component. The values can be stored in a field, usually named helm_values . Here's an example: # params.jsonnet { ... # Defined a field to contains helm values helm_values: { webhook: { enabled: false }, # this is a value for the helm chart }, } The chart is be referenced and processed through the helmTemplate native function. The documentation for this native function can be found here local config = std.extVar(\"kr8\"); local helm_template = std.native(\"helmTemplate\")(config.release_name, \"./vendor/\"+\"external-dns-\"+config.chart_version, { calledFrom: std.thisFile, namespace: config.namespace, values: if \"helm_values\" in config then config.helm_values else {}, }); std.objectValues(helm_template) The values can also be stored in a separate file, and referenced via includes or extfiles configuration.","title":"Params and chart config"},{"location":"concepts/components/#patches","text":"There are certain situations where a configuration option is not available for a helm chart. For example, you might want to add an argument that hasn't quite made it into the helm chart yet, or add something like pod affinity where it isn't actually a value option in a helm chart. kr8+ helps you in this situation by providing a mechanism to patch a helm chart. After loading the chart through the Here's an example patches.jsonnet for external-dns local config = std.extVar(\"kr8\"); local helm_template = std.native(\"helmTemplate\")(config.release_name, \"./vendor/\"+\"external-dns-\"+config.chart_version, { calledFrom: std.thisFile, namespace: config.namespace, values: if \"helm_values\" in config then config.helm_values else {}, }); [ object { metadata+: { labels+: note: \"hello\", other_thing: \"yes\" } } for object in std.objectValues(helm_template) if \"kind\" in object && object.kind != \"Secret\" // stop from committing secrets to repo ]","title":"Patches"},{"location":"concepts/components/#taskfile_2","text":"This is used to codify the initial chart fetch, which needs to be performed to fetch new updates and changes. An example taskfile for a helm chart might look like this: # https://taskfile.dev/usage version: '3' vars: CHART_NAME: external-dns CHART_REPO: 'https://kubernetes-sigs.github.io/external-dns/' tasks: default: cmds: - task: fetch-1.15 fetch-1.15: desc: \"fetch component dependencies\" vars: CHART_VER: v1.15.0 cmds: - task: fetch-chart vars: { VER: '{{.CHART_VER}}'} fetch-1.14: desc: \"fetch component dependencies\" vars: CHART_VER: v1.14.0 cmds: - task: fetch-chart vars: { VER: '{{.CHART_VER}}'} fetch-chart: desc: \"fetch a helm chart\" vars: VER: '{{default \"unset\" .VER}}' cmds: - mkdir -p ./vendor/{{.CHART_NAME}}-{{.VER}} && rm -rf ./vendor/{{.CHART_NAME}}-{{.VER}}/* - mkdir -p ./vendor/tmp && rm -rf ./vendor/tmp/* # add the helm repo and fetch it locally into vendor directory - helm fetch --repo {{.CHART_REPO}} --untar --untardir ./vendor/tmp --version \"{{.VER}}\" \"{{.CHART_NAME}}\" - mv ./vendor/tmp/{{.CHART_NAME}}/* ./vendor/{{.CHART_NAME}}-{{.VER}}/ && rm -rf ./vendor/tmp","title":"Taskfile"},{"location":"concepts/nativefuncs/","text":"Native Functions Additional functions have been added to the jsonnet vm to add functionality. They are able to be called from jsonnet using std.native('funcName') , where funcName is the name of the function. Native function definitions: pkg/nativefuncs . template Templates the passed in input str using the json string config . Config is unmarshaled into a json object and passed to the template engine. The template engine used is sprig - Template Documentation . The resulting string is returned. Usage: std.native(\"template\")(config json, str string) (string) Example: local templateOutput = std.native(\"template\")(config.data, \"Hello {{ .Name }}\"); helmTemplate Provides the same Helm.Template functionality as the grafana/tanka package. Charts are required to be present on the local filesystem, at a relative location to the file that calls helm.template() / std.native('helmTemplate') . This guarantees hermeticity. Does not use sprig for templating. Usage: std.native(\"helmTemplate\")(name string, chart string, opts TemplateOpts) (manifest.List) Example: local helm_template = std.native(\"helmTemplate\")(config.release_name, \"./vendor/\"+config.chart_version, { calledFrom: std.thisFile, namespace: config.namespace, values: config.helm_values, }); [ object for object in std.objectValues(helm_template) if \"kind\" in object && object.kind != \"Secret\" ] Template Opts: godocs grafana/tanka Function Source: grafana/tanka v0.27.1 escapeStringRegex Uses regexp.QuoteMeta to escape a string for use in a regular expression. Usage: std.native(\"escapeStringRegex\")(str string) (string) Example: local clean_string = std.native(\"escapeStringRegex\")(config.knarly_string); regexMatch Uses regexp.MatchString to check if a string matches a regular expression. Usage: std.native(\"regexMatch\")(regex string, str string) (bool) Example: // check if a string is numbers if std.native(\"regexMatch\")(\"\\d+\", config.thing) then config.thing else \"\" regexSubst Uses regexp.ReplaceAllString to replace all occurrences of a regular expression in a string. Usage: std.native(\"regexSubst\")(regex string, src string, repl string) (string) Example: local stringVar = std.native(\"regexSubst\")(\"\\d\", config.thing, \"<num>\");","title":"Native Funcs"},{"location":"concepts/nativefuncs/#native-functions","text":"Additional functions have been added to the jsonnet vm to add functionality. They are able to be called from jsonnet using std.native('funcName') , where funcName is the name of the function. Native function definitions: pkg/nativefuncs .","title":"Native Functions"},{"location":"concepts/nativefuncs/#template","text":"Templates the passed in input str using the json string config . Config is unmarshaled into a json object and passed to the template engine. The template engine used is sprig - Template Documentation . The resulting string is returned. Usage: std.native(\"template\")(config json, str string) (string) Example: local templateOutput = std.native(\"template\")(config.data, \"Hello {{ .Name }}\");","title":"template"},{"location":"concepts/nativefuncs/#helmtemplate","text":"Provides the same Helm.Template functionality as the grafana/tanka package. Charts are required to be present on the local filesystem, at a relative location to the file that calls helm.template() / std.native('helmTemplate') . This guarantees hermeticity. Does not use sprig for templating. Usage: std.native(\"helmTemplate\")(name string, chart string, opts TemplateOpts) (manifest.List) Example: local helm_template = std.native(\"helmTemplate\")(config.release_name, \"./vendor/\"+config.chart_version, { calledFrom: std.thisFile, namespace: config.namespace, values: config.helm_values, }); [ object for object in std.objectValues(helm_template) if \"kind\" in object && object.kind != \"Secret\" ] Template Opts: godocs grafana/tanka Function Source: grafana/tanka v0.27.1","title":"helmTemplate"},{"location":"concepts/nativefuncs/#escapestringregex","text":"Uses regexp.QuoteMeta to escape a string for use in a regular expression. Usage: std.native(\"escapeStringRegex\")(str string) (string) Example: local clean_string = std.native(\"escapeStringRegex\")(config.knarly_string);","title":"escapeStringRegex"},{"location":"concepts/nativefuncs/#regexmatch","text":"Uses regexp.MatchString to check if a string matches a regular expression. Usage: std.native(\"regexMatch\")(regex string, str string) (bool) Example: // check if a string is numbers if std.native(\"regexMatch\")(\"\\d+\", config.thing) then config.thing else \"\"","title":"regexMatch"},{"location":"concepts/nativefuncs/#regexsubst","text":"Uses regexp.ReplaceAllString to replace all occurrences of a regular expression in a string. Usage: std.native(\"regexSubst\")(regex string, src string, repl string) (string) Example: local stringVar = std.native(\"regexSubst\")(\"\\d\", config.thing, \"<num>\");","title":"regexSubst"},{"location":"concepts/overview/","text":"Concepts kr8+ is used to define and generate cluster config. It is designed to easily layer config from multiple sources. A deployment consists of 2 parts: components - one or more applications packaged together clusters - a deployment environment, organized as a tree of configuration The relationship between components and clusters are simple: components are installed on clusters. A complete deployment with mutliplte clusters has: components that are installed on all clusters (auth, cert management, secrets, monitoring) components that are only installed on some clusters (services, hardware dependent workloads) components that have multiple versions/deployments installed on a single cluster (upgrades, namespacing) For working examples of everything, check out the ice-bergtech/kr8-examples repo. Components A component is something you install in your cluster to make it function and work as you expect. Some examples of components might be: cluster core resources: cert-manager or sealed-secrets argo applications: generate argo cd applications for managing applying cluster configuration to live nodes application: a single application that you want to run in your cluster. This is usually a web application, but it can also be a database, cron job, or documentation. for more information on components see the Components documentation. Cluster Config A cluster is a Kubernetes cluster running in a cloud provider, datacenter or elsewhere. If you are using this tool than you likely have multiple clusters across multiple environments and regions. By design, configuration is able to be layered and overridden at different levels in a tree structure. This is the strength of jsonnet and allows for a lot of flexibility in managing your cluster configurations. Cluster names are based on the directory structure under ./clusters by default, or the directory specified by the --clusterdir , -D flags. A typical cluster config folder layout may look like: clusters \u251c\u2500\u2500 params.jsonnet # top level config; used as defaults for all clusters \u251c\u2500\u2500 development \u2502 \u251c\u2500\u2500 dev-test \u2502 \u2502 \u2514\u2500\u2500 cluster.jsonnet # dev configs \u2502 \u2514\u2500\u2500 dev-staging \u2502 \u2514\u2500\u2500 cluster.jsonnet # staging configs \u2514\u2500\u2500 production \u251c\u2500\u2500 params.jsonnet # standard prod configs for cluster and components \u251c\u2500\u2500 region-1 \u2502 \u251c\u2500\u2500 params.jsonnet # region specific params \u2502 \u251c\u2500\u2500 pre-prod \u2502 \u2502 \u2514\u2500\u2500 cluster.jsonnet \u2502 \u2514\u2500\u2500 prod \u2502 \u251c\u2500\u2500 cluster.jsonnet # prod-level configs \u2502 \u251c\u2500\u2500 workloads-1 \u2502 \u2502 \u2514\u2500\u2500 cluster.jsonnet \u2502 \u2514\u2500\u2500 workloads-2 \u2502 \u2514\u2500\u2500 cluster.jsonnet \u2514\u2500\u2500 region-2 \u251c\u2500\u2500 params.jsonnet # region specific params \u251c\u2500\u2500 pre-prod \u2502 \u2514\u2500\u2500 cluster.jsonnet \u251c\u2500\u2500 prod-1 \u2502 \u2514\u2500\u2500 cluster.jsonnet \u2514\u2500\u2500 workloads-1 \u2514\u2500\u2500 cluster.jsonnet See the Clusters documentation.","title":"Overview"},{"location":"concepts/overview/#concepts","text":"kr8+ is used to define and generate cluster config. It is designed to easily layer config from multiple sources. A deployment consists of 2 parts: components - one or more applications packaged together clusters - a deployment environment, organized as a tree of configuration The relationship between components and clusters are simple: components are installed on clusters. A complete deployment with mutliplte clusters has: components that are installed on all clusters (auth, cert management, secrets, monitoring) components that are only installed on some clusters (services, hardware dependent workloads) components that have multiple versions/deployments installed on a single cluster (upgrades, namespacing) For working examples of everything, check out the ice-bergtech/kr8-examples repo.","title":"Concepts"},{"location":"concepts/overview/#components","text":"A component is something you install in your cluster to make it function and work as you expect. Some examples of components might be: cluster core resources: cert-manager or sealed-secrets argo applications: generate argo cd applications for managing applying cluster configuration to live nodes application: a single application that you want to run in your cluster. This is usually a web application, but it can also be a database, cron job, or documentation. for more information on components see the Components documentation.","title":"Components"},{"location":"concepts/overview/#cluster-config","text":"A cluster is a Kubernetes cluster running in a cloud provider, datacenter or elsewhere. If you are using this tool than you likely have multiple clusters across multiple environments and regions. By design, configuration is able to be layered and overridden at different levels in a tree structure. This is the strength of jsonnet and allows for a lot of flexibility in managing your cluster configurations. Cluster names are based on the directory structure under ./clusters by default, or the directory specified by the --clusterdir , -D flags. A typical cluster config folder layout may look like: clusters \u251c\u2500\u2500 params.jsonnet # top level config; used as defaults for all clusters \u251c\u2500\u2500 development \u2502 \u251c\u2500\u2500 dev-test \u2502 \u2502 \u2514\u2500\u2500 cluster.jsonnet # dev configs \u2502 \u2514\u2500\u2500 dev-staging \u2502 \u2514\u2500\u2500 cluster.jsonnet # staging configs \u2514\u2500\u2500 production \u251c\u2500\u2500 params.jsonnet # standard prod configs for cluster and components \u251c\u2500\u2500 region-1 \u2502 \u251c\u2500\u2500 params.jsonnet # region specific params \u2502 \u251c\u2500\u2500 pre-prod \u2502 \u2502 \u2514\u2500\u2500 cluster.jsonnet \u2502 \u2514\u2500\u2500 prod \u2502 \u251c\u2500\u2500 cluster.jsonnet # prod-level configs \u2502 \u251c\u2500\u2500 workloads-1 \u2502 \u2502 \u2514\u2500\u2500 cluster.jsonnet \u2502 \u2514\u2500\u2500 workloads-2 \u2502 \u2514\u2500\u2500 cluster.jsonnet \u2514\u2500\u2500 region-2 \u251c\u2500\u2500 params.jsonnet # region specific params \u251c\u2500\u2500 pre-prod \u2502 \u2514\u2500\u2500 cluster.jsonnet \u251c\u2500\u2500 prod-1 \u2502 \u2514\u2500\u2500 cluster.jsonnet \u2514\u2500\u2500 workloads-1 \u2514\u2500\u2500 cluster.jsonnet See the Clusters documentation.","title":"Cluster Config"},{"location":"godoc/kr8-cmd/","text":"cmd import \"github.com/ice-bergtech/kr8/cmd\" Index Variables func ConfigureLogger(debug bool) func Execute(ver string) func GenerateCommand(cmd *cobra.Command, args []string) func InitConfig() type CmdGenerateOptions type CmdGetOptions type CmdRenderOptions type CmdRootOptions type Stamp Variables var FormatCmd = &cobra.Command{ Use: \"format [flags]\", Short: \"Format jsonnet files\", Long: `Format jsonnet configuration files`, Args: cobra.MinimumNArgs(0), Run: func(cmd *cobra.Command, args []string) { // First get a list of all files in the base directory and subdirectories. Ignore .git directories. var fileList []string err := filepath.Walk(RootConfig.BaseDir, func(path string, info fs.FileInfo, err error) error { if info.IsDir() { if info.Name() == \".git\" { return filepath.SkipDir } return nil } fileList = append(fileList, path) return nil }) util.FatalErrorCheck(\"Error walking the path \"+RootConfig.BaseDir, err) fileList = util.Filter(fileList, func(s string) bool { var result bool for _, f := range strings.Split(cmdFormatFlags.Includes, \",\") { t, _ := filepath.Match(f, s) if t { return t } result = result || t } return result }) fileList = util.Filter(fileList, func(s string) bool { var result bool for _, f := range strings.Split(cmdFormatFlags.Excludes, \",\") { t, _ := filepath.Match(f, s) if t { return !t } result = result || t } return !result }) log.Debug().Msg(\"Filtered file list: \" + fmt.Sprintf(\"%v\", fileList)) log.Debug().Msg(\"Formatting files...\") var waitGroup sync.WaitGroup parallel, err := cmd.Flags().GetInt(\"parallel\") util.FatalErrorCheck(\"Error getting parallel flag\", err) log.Debug().Msg(\"Parallel set to \" + strconv.Itoa(parallel)) ants_file, _ := ants.NewPool(parallel) for _, filename := range fileList { waitGroup.Add(1) _ = ants_file.Submit(func() { defer waitGroup.Done() var bytes []byte bytes, err = os.ReadFile(filepath.Clean(filename)) output, err := formatter.Format(filename, string(bytes), util.GetDefaultFormatOptions()) if err != nil { fmt.Fprintln(os.Stderr, err.Error()) return } err = os.WriteFile(filepath.Clean(filename), []byte(output), 0600) if err != nil { fmt.Fprintln(os.Stderr, err.Error()) return } }) } waitGroup.Wait() }, } var GenerateCmd = &cobra.Command{ Use: \"generate [flags]\", Aliases: []string{\"gen\"}, Short: \"Generate components\", Long: `Generate components in clusters`, Example: \"kr8 generate\", Args: cobra.MinimumNArgs(0), Run: GenerateCommand, } var GetClustersCmd = &cobra.Command{ Use: \"clusters [flags]\", Short: \"Get all clusters\", Long: \"Get all clusters defined in kr8 config hierarchy\", Run: func(cmd *cobra.Command, args []string) { clusters, err := util.GetClusterFilenames(RootConfig.ClusterDir) util.FatalErrorCheck(\"Error getting clusters\", err) if cmdGetFlags.NoTable { for _, c := range clusters { println(c.Name + \": \" + c.Path) } return } var entry []string table := tablewriter.NewWriter(os.Stdout) table.SetHeader([]string{\"Name\", \"Path\"}) for _, c := range clusters { entry = append(entry, c.Name) entry = append(entry, c.Path) table.Append(entry) entry = entry[:0] } table.Render() }, } GetCmd represents the get command. var GetCmd = &cobra.Command{ Use: \"get\", Short: \"Display one or many kr8 resources\", Long: `Displays information about kr8 resources such as clusters and components`, } var GetComponentsCmd = &cobra.Command{ Use: \"components [flags]\", Short: \"Get all components\", Long: \"Get all available components defined in the kr8 config hierarchy\", Run: func(cmd *cobra.Command, args []string) { if cmdGetFlags.Cluster == \"\" && cmdGetFlags.ClusterParams == \"\" { log.Fatal().Msg(\"Please specify a --cluster name and/or --clusterparams file\") } var params []string if cmdGetFlags.Cluster != \"\" { clusterPath, err := util.GetClusterPaths(RootConfig.ClusterDir, cmdGetFlags.Cluster) util.FatalErrorCheck(\"error getting cluster path for \"+cmdGetFlags.Cluster, err) params = util.GetClusterParamsFilenames(RootConfig.ClusterDir, clusterPath) } if cmdGetFlags.ClusterParams != \"\" { params = append(params, cmdGetFlags.ClusterParams) } jvm, err := jnetvm.JsonnetRenderFiles(RootConfig.VMConfig, params, \"._components\", true, \"\", \"components\") util.FatalErrorCheck(\"error rendering jsonnet files\", err) if cmdGetFlags.ParamField != \"\" { value := gjson.Get(jvm, cmdGetFlags.ParamField) if value.String() == \"\" { log.Fatal().Msg(\"Error getting param: \" + cmdGetFlags.ParamField) } else { formatted, err := util.Pretty(jvm, RootConfig.Color) util.FatalErrorCheck(\"error pretty printing jsonnet\", err) fmt.Println(formatted) } } else { formatted, err := util.Pretty(jvm, RootConfig.Color) util.FatalErrorCheck(\"error pretty printing jsonnet\", err) fmt.Println(formatted) } }, } var GetParamsCmd = &cobra.Command{ Use: \"params [flags]\", Short: \"Get parameter for components and clusters\", Long: \"Get parameters assigned to clusters and components in the kr8 config hierarchy\", Run: func(cmd *cobra.Command, args []string) { if cmdGetFlags.Cluster == \"\" { log.Fatal().Msg(\"Please specify a --cluster\") } var cList []string if cmdGetFlags.Component != \"\" { cList = append(cList, cmdGetFlags.Component) } params, err := jnetvm.JsonnetRenderClusterParams( RootConfig.VMConfig, cmdGetFlags.Cluster, cList, cmdGetFlags.ClusterParams, true, ) util.FatalErrorCheck(\"error rendering cluster params\", err) if cmdGetFlags.ParamField == \"\" { if cmdGetFlags.Component != \"\" { result := gjson.Get(params, cmdGetFlags.Component).String() formatted, err := util.Pretty(result, RootConfig.Color) util.FatalErrorCheck(\"error pretty printing jsonnet\", err) fmt.Println(formatted) } else { formatted, err := util.Pretty(params, RootConfig.Color) util.FatalErrorCheck(\"error pretty printing jsonnet\", err) fmt.Println(formatted) } return } if cmdGetFlags.ParamField != \"\" { value := gjson.Get(params, cmdGetFlags.ParamField) if value.String() == \"\" { log.Fatal().Msg(\"Error getting param: \" + cmdGetFlags.ParamField) } fmt.Println(value) } }, } var InitClusterCmd = &cobra.Command{ Use: \"cluster [flags]\", Short: \"Init a new cluster config file\", Long: \"Initialize a new cluster configuration file\", Run: func(cmd *cobra.Command, args []string) { cSpec := types.Kr8ClusterSpec{ Name: cmdInitFlags.ClusterName, PostProcessor: \"function(input) input\", GenerateDir: \"generated\", GenerateShortNames: false, PruneParams: false, ClusterOutputDir: RootConfig.ClusterDir, } if cmdInitFlags.Interactive { prompt := &survey.Input{ Message: \"Set the cluster configuration directory\", Default: RootConfig.ClusterDir, Help: \"Set the root directory to store cluster configurations, optionally including subdirectories\", } util.FatalErrorCheck(\"Invalid cluster directory\", survey.AskOne(prompt, &cSpec.ClusterOutputDir)) prompt = &survey.Input{ Message: \"Set the cluster name\", Default: cmdInitFlags.ClusterName, Help: \"Distinct name for the cluster\", } util.FatalErrorCheck(\"Invalid cluster name\", survey.AskOne(prompt, &cSpec.Name)) promptB := &survey.Confirm{ Message: \"Generate short names for output file names?\", Default: cSpec.GenerateShortNames, Help: \"Shortens component names and file structure\", } util.FatalErrorCheck(\"Invalid option\", survey.AskOne(promptB, &cSpec.GenerateShortNames)) promptB = &survey.Confirm{ Message: \"Prune component parameters?\", Default: cSpec.PruneParams, Help: \"This removes empty and null parameters from configuration\", } util.FatalErrorCheck(\"Invalid option\", survey.AskOne(promptB, &cSpec.PruneParams)) } util.FatalErrorCheck( \"Error generating cluster jsonnet file\", kr8init.GenerateClusterJsonnet(cSpec, cSpec.ClusterOutputDir), ) }, } InitCmd represents the command. Various subcommands are available to initialize different components of kr8. var InitCmd = &cobra.Command{ Use: \"init\", Short: \"Initialize kr8 config repos, components and clusters\", Long: `kr8 requires specific directories and exists for its config to work. This init command helps in creating directory structure for repos, clusters and components`, } var InitComponentCmd = &cobra.Command{ Use: \"component [flags]\", Short: \"Init a new component config file\", Long: \"Initialize a new component configuration file\", Run: func(cmd *cobra.Command, args []string) { if cmdInitFlags.Interactive { prompt := &survey.Input{ Message: \"Enter component directory\", Default: RootConfig.ComponentDir, Help: \"Enter the root directory to store components in\", } util.FatalErrorCheck(\"Invalid component directory\", survey.AskOne(prompt, &RootConfig.ComponentDir)) prompt = &survey.Input{ Message: \"Enter component name\", Default: cmdInitFlags.ComponentName, Help: \"Enter the name of the component you want to create\", } util.FatalErrorCheck(\"Invalid component name\", survey.AskOne(prompt, &cmdInitFlags.ComponentName)) promptS := &survey.Select{ Message: \"Select component type\", Options: []string{\"jsonnet\", \"yml\", \"tpl\", \"chart\"}, Help: \"Select the type of component you want to create\", Default: \"jsonnet\", Description: func(value string, index int) string { switch value { case \"jsonnet\": return \"Use a Jsonnet file to describe the component resources\" case \"chart\": return \"Use a Helm chart to describe the component resources\" case \"yml\": return \"Use a yml (docker-compose) file to describe the component resources\" case \"tpl\": return \"Use a template file to describe the component resources\" default: return \"\" } }, } util.FatalErrorCheck(\"Invalid component type\", survey.AskOne(promptS, &cmdInitFlags.ComponentType)) } util.FatalErrorCheck( \"Error generating component jsonnet\", kr8init.GenerateComponentJsonnet(cmdInitFlags, RootConfig.ComponentDir), ) }, } Initializes a new kr8 configuration repository Directory tree: components/ clusters/ lib/ generated/ var InitRepoCmd = &cobra.Command{ Use: \"repo [flags] dir\", Args: cobra.MinimumNArgs(1), Short: \"Initialize a new kr8 config repo\", Long: `Initialize a new kr8 config repo by downloading the kr8 config skeleton repo and initialize a git repo so you can get started`, Run: func(cmd *cobra.Command, args []string) { if len(args) == 0 { log.Fatal().Msg(\"Error: no directory specified\") } outDir := args[len(args)-1] log.Debug().Msg(\"Initializing kr8 config repo in \" + outDir) if cmdInitFlags.InitUrl != \"\" { util.FatalErrorCheck( \"Issue fetching repo\", util.FetchRepoUrl(cmdInitFlags.InitUrl, outDir, !cmdInitFlags.Fetch), ) return } cmdInitOptions := kr8init.Kr8InitOptions{ InitUrl: cmdInitFlags.InitUrl, ClusterName: cmdInitFlags.ClusterName, ComponentName: \"example-component\", ComponentType: \"jsonnet\", Interactive: false, Fetch: false, } clusterOptions := types.Kr8ClusterSpec{ Name: cmdInitFlags.ClusterName, PostProcessor: \"\", GenerateDir: \"generated\", GenerateShortNames: false, PruneParams: false, ClusterOutputDir: \"generated\" + \"/\" + cmdInitFlags.ClusterName, } util.FatalErrorCheck( \"Issue creating cluster.jsonnet\", kr8init.GenerateClusterJsonnet(clusterOptions, outDir+\"/clusters\"), ) util.FatalErrorCheck( \"Issue creating example component.jsonnet\", kr8init.GenerateComponentJsonnet(cmdInitOptions, outDir+\"/components\"), ) util.FatalErrorCheck( \"Issue creating lib folder\", kr8init.GenerateLib(cmdInitFlags.Fetch, outDir+\"/lib\"), ) util.FatalErrorCheck( \"Issue creating Readme.md\", kr8init.GenerateReadme(outDir, cmdInitOptions, clusterOptions), ) }, } var JsonnetCmd = &cobra.Command{ Use: \"jsonnet\", Short: \"Jsonnet utilities\", Long: `Utility commands to process jsonnet`, } var JsonnetRenderCmd = &cobra.Command{ Use: \"render [flags] file [file ...]\", Short: \"Render a jsonnet file\", Long: `Render a jsonnet file to JSON or YAML`, Args: cobra.MinimumNArgs(1), Run: func(cmd *cobra.Command, args []string) { for _, f := range args { err := jvm.JsonnetRender(cmdFlagsJsonnet, f, RootConfig.VMConfig) if err != nil { log.Fatal().Str(\"file\", f).Err(err).Msg(\"error rendering jsonnet file\") } } }, } var RenderCmd = &cobra.Command{ Use: \"render\", Short: \"Render files\", Long: `Render files in jsonnet or YAML`, } var RenderHelmCmd = &cobra.Command{ Use: \"helm\", Short: \"Clean YAML stream from Helm Template output - Reads from Stdin\", Long: `Removes Null YAML objects from a YAML stream`, Run: func(cmd *cobra.Command, args []string) { decoder := yaml.NewYAMLReader(bufio.NewReader(os.Stdin)) jsa := [][]byte{} for { bytes, err := decoder.Read() if errors.Is(err, io.EOF) { break } else if err != nil { util.FatalErrorCheck(\"Error decoding yaml stream\", err) } if len(bytes) == 0 { continue } jsonData, err := yaml.ToJSON(bytes) util.FatalErrorCheck(\"Error converting yaml to JSON\", err) if string(jsonData) == \"null\" { continue } _, _, err = unstructured.UnstructuredJSONScheme.Decode(jsonData, nil, nil) util.FatalErrorCheck(\"Error handling unstructured JSON\", err) jsa = append(jsa, jsonData) } for _, j := range jsa { out, err := goyaml.JSONToYAML(j) util.FatalErrorCheck(\"Error encoding JSON to YAML\", err) fmt.Println(\"---\") fmt.Println(string(out)) } }, } var RenderJsonnetCmd = &cobra.Command{ Use: \"jsonnet file [file ...]\", Short: \"Render a jsonnet file\", Long: `Render a jsonnet file to JSON or YAML`, Args: cobra.MinimumNArgs(1), Run: func(cmd *cobra.Command, args []string) { for _, fileName := range args { err := jvm.JsonnetRender( types.CmdJsonnetOptions{ Prune: cmdRenderFlags.Prune, ClusterParams: cmdRenderFlags.ClusterParams, Cluster: cmdRenderFlags.Cluster, Component: cmdRenderFlags.ComponentName, Format: cmdRenderFlags.Format, Color: false, }, fileName, RootConfig.VMConfig) if err != nil { log.Fatal().Str(\"filename\", fileName).Err(err).Msg(\"error rendering jsonnet\") } } }, } RootCmd represents the base command when called without any subcommands. var RootCmd = &cobra.Command{ Use: \"kr8\", Short: \"A jsonnet-powered config management tool\", Long: `An opinionated configuration management tool for Kubernetes Clusters powered by jsonnet`, } Print out versions of packages in use. Chore() - Updated manually. var VersionCmd = &cobra.Command{ Use: \"version\", Short: \"Return the current version of kr8+\", Long: `return the current version of kr8+`, Run: func(cmd *cobra.Command, args []string) { fmt.Println(RootCmd.Use + \"+ Version: \" + version) info, ok := debug.ReadBuildInfo() if !ok { log.Fatal().Msg(\"could not read build info\") } stamp := retrieveStamp(info) fmt.Printf(\" Built with %s on %s\\n\", stamp.InfoGoCompiler, stamp.InfoBuildTime) fmt.Printf(\" VCS revision: %s\\n\", stamp.VCSRevision) fmt.Printf(\" Go version %s, GOOS %s, GOARCH %s\\n\", info.GoVersion, stamp.InfoGOOS, stamp.InfoGOARCH) fmt.Print(\" Dependencies:\\n\") for _, mod := range retrieveDepends(info) { fmt.Printf(\" %s\\n\", mod) } }, } func ConfigureLogger func ConfigureLogger(debug bool) func Execute func Execute(ver string) Execute adds all child commands to the root command sets flags appropriately. This is called by main.main(). It only needs to happen once to the rootCmd. func GenerateCommand func GenerateCommand(cmd *cobra.Command, args []string) This function generates the components for each cluster in parallel. It uses a wait group to ensure that all clusters have been processed before exiting. func InitConfig func InitConfig() InitConfig reads in config file and ENV variables if set. type CmdGenerateOptions Stores the options for the 'generate' command. type CmdGenerateOptions struct { // Stores the path to the cluster params file ClusterParamsFile string // Stores the output directory for generated files GenerateDir string // Stores the filters to apply to clusters and components when generating files Filters util.PathFilterOptions } type CmdGetOptions Holds the options for the get command. type CmdGetOptions struct { // ClusterParams provides a way to provide cluster params as a single file. // This can be combined with --cluster to override the cluster. ClusterParams string // If true, just prints result instead of placing in table NoTable bool // Field to display from the resource FieldName string // Cluster to get resources from Cluster string // Component to get resources from Component string // Param to display from the resource ParamField string } type CmdRenderOptions Contains parameters for the kr8 render command. type CmdRenderOptions struct { // Prune null and empty objects from rendered json Prune bool // Filename to read cluster configuration from ClusterParams string // Name of the component to render ComponentName string // Name of the cluster to render Cluster string // Format of the output (yaml, json or stream) Format string } type CmdRootOptions Default options that are available to all commands. type CmdRootOptions struct { // kr8 config base directory BaseDir string // kr8 cluster directory ClusterDir string // kr8 component directory ComponentDir string // A config file with kr8 configuration ConfigFile string // parallelism - defaults to runtime.GOMAXPROCS(0) Parallel int // log more information about what kr8 is doing. Overrides --loglevel Debug bool // set log level LogLevel string // enable colorized output (default true). Set to false to disable\") Color bool // contains ingormation to configure jsonnet vm VMConfig types.VMConfig } var RootConfig CmdRootOptions type Stamp type Stamp struct { InfoGoVersion string InfoGoCompiler string InfoGOARCH string InfoGOOS string InfoBuildTime string VCSRevision string }","title":"kr8"},{"location":"godoc/kr8-cmd/#cmd","text":"import \"github.com/ice-bergtech/kr8/cmd\"","title":"cmd"},{"location":"godoc/kr8-cmd/#index","text":"Variables func ConfigureLogger(debug bool) func Execute(ver string) func GenerateCommand(cmd *cobra.Command, args []string) func InitConfig() type CmdGenerateOptions type CmdGetOptions type CmdRenderOptions type CmdRootOptions type Stamp","title":"Index"},{"location":"godoc/kr8-cmd/#variables","text":"var FormatCmd = &cobra.Command{ Use: \"format [flags]\", Short: \"Format jsonnet files\", Long: `Format jsonnet configuration files`, Args: cobra.MinimumNArgs(0), Run: func(cmd *cobra.Command, args []string) { // First get a list of all files in the base directory and subdirectories. Ignore .git directories. var fileList []string err := filepath.Walk(RootConfig.BaseDir, func(path string, info fs.FileInfo, err error) error { if info.IsDir() { if info.Name() == \".git\" { return filepath.SkipDir } return nil } fileList = append(fileList, path) return nil }) util.FatalErrorCheck(\"Error walking the path \"+RootConfig.BaseDir, err) fileList = util.Filter(fileList, func(s string) bool { var result bool for _, f := range strings.Split(cmdFormatFlags.Includes, \",\") { t, _ := filepath.Match(f, s) if t { return t } result = result || t } return result }) fileList = util.Filter(fileList, func(s string) bool { var result bool for _, f := range strings.Split(cmdFormatFlags.Excludes, \",\") { t, _ := filepath.Match(f, s) if t { return !t } result = result || t } return !result }) log.Debug().Msg(\"Filtered file list: \" + fmt.Sprintf(\"%v\", fileList)) log.Debug().Msg(\"Formatting files...\") var waitGroup sync.WaitGroup parallel, err := cmd.Flags().GetInt(\"parallel\") util.FatalErrorCheck(\"Error getting parallel flag\", err) log.Debug().Msg(\"Parallel set to \" + strconv.Itoa(parallel)) ants_file, _ := ants.NewPool(parallel) for _, filename := range fileList { waitGroup.Add(1) _ = ants_file.Submit(func() { defer waitGroup.Done() var bytes []byte bytes, err = os.ReadFile(filepath.Clean(filename)) output, err := formatter.Format(filename, string(bytes), util.GetDefaultFormatOptions()) if err != nil { fmt.Fprintln(os.Stderr, err.Error()) return } err = os.WriteFile(filepath.Clean(filename), []byte(output), 0600) if err != nil { fmt.Fprintln(os.Stderr, err.Error()) return } }) } waitGroup.Wait() }, } var GenerateCmd = &cobra.Command{ Use: \"generate [flags]\", Aliases: []string{\"gen\"}, Short: \"Generate components\", Long: `Generate components in clusters`, Example: \"kr8 generate\", Args: cobra.MinimumNArgs(0), Run: GenerateCommand, } var GetClustersCmd = &cobra.Command{ Use: \"clusters [flags]\", Short: \"Get all clusters\", Long: \"Get all clusters defined in kr8 config hierarchy\", Run: func(cmd *cobra.Command, args []string) { clusters, err := util.GetClusterFilenames(RootConfig.ClusterDir) util.FatalErrorCheck(\"Error getting clusters\", err) if cmdGetFlags.NoTable { for _, c := range clusters { println(c.Name + \": \" + c.Path) } return } var entry []string table := tablewriter.NewWriter(os.Stdout) table.SetHeader([]string{\"Name\", \"Path\"}) for _, c := range clusters { entry = append(entry, c.Name) entry = append(entry, c.Path) table.Append(entry) entry = entry[:0] } table.Render() }, } GetCmd represents the get command. var GetCmd = &cobra.Command{ Use: \"get\", Short: \"Display one or many kr8 resources\", Long: `Displays information about kr8 resources such as clusters and components`, } var GetComponentsCmd = &cobra.Command{ Use: \"components [flags]\", Short: \"Get all components\", Long: \"Get all available components defined in the kr8 config hierarchy\", Run: func(cmd *cobra.Command, args []string) { if cmdGetFlags.Cluster == \"\" && cmdGetFlags.ClusterParams == \"\" { log.Fatal().Msg(\"Please specify a --cluster name and/or --clusterparams file\") } var params []string if cmdGetFlags.Cluster != \"\" { clusterPath, err := util.GetClusterPaths(RootConfig.ClusterDir, cmdGetFlags.Cluster) util.FatalErrorCheck(\"error getting cluster path for \"+cmdGetFlags.Cluster, err) params = util.GetClusterParamsFilenames(RootConfig.ClusterDir, clusterPath) } if cmdGetFlags.ClusterParams != \"\" { params = append(params, cmdGetFlags.ClusterParams) } jvm, err := jnetvm.JsonnetRenderFiles(RootConfig.VMConfig, params, \"._components\", true, \"\", \"components\") util.FatalErrorCheck(\"error rendering jsonnet files\", err) if cmdGetFlags.ParamField != \"\" { value := gjson.Get(jvm, cmdGetFlags.ParamField) if value.String() == \"\" { log.Fatal().Msg(\"Error getting param: \" + cmdGetFlags.ParamField) } else { formatted, err := util.Pretty(jvm, RootConfig.Color) util.FatalErrorCheck(\"error pretty printing jsonnet\", err) fmt.Println(formatted) } } else { formatted, err := util.Pretty(jvm, RootConfig.Color) util.FatalErrorCheck(\"error pretty printing jsonnet\", err) fmt.Println(formatted) } }, } var GetParamsCmd = &cobra.Command{ Use: \"params [flags]\", Short: \"Get parameter for components and clusters\", Long: \"Get parameters assigned to clusters and components in the kr8 config hierarchy\", Run: func(cmd *cobra.Command, args []string) { if cmdGetFlags.Cluster == \"\" { log.Fatal().Msg(\"Please specify a --cluster\") } var cList []string if cmdGetFlags.Component != \"\" { cList = append(cList, cmdGetFlags.Component) } params, err := jnetvm.JsonnetRenderClusterParams( RootConfig.VMConfig, cmdGetFlags.Cluster, cList, cmdGetFlags.ClusterParams, true, ) util.FatalErrorCheck(\"error rendering cluster params\", err) if cmdGetFlags.ParamField == \"\" { if cmdGetFlags.Component != \"\" { result := gjson.Get(params, cmdGetFlags.Component).String() formatted, err := util.Pretty(result, RootConfig.Color) util.FatalErrorCheck(\"error pretty printing jsonnet\", err) fmt.Println(formatted) } else { formatted, err := util.Pretty(params, RootConfig.Color) util.FatalErrorCheck(\"error pretty printing jsonnet\", err) fmt.Println(formatted) } return } if cmdGetFlags.ParamField != \"\" { value := gjson.Get(params, cmdGetFlags.ParamField) if value.String() == \"\" { log.Fatal().Msg(\"Error getting param: \" + cmdGetFlags.ParamField) } fmt.Println(value) } }, } var InitClusterCmd = &cobra.Command{ Use: \"cluster [flags]\", Short: \"Init a new cluster config file\", Long: \"Initialize a new cluster configuration file\", Run: func(cmd *cobra.Command, args []string) { cSpec := types.Kr8ClusterSpec{ Name: cmdInitFlags.ClusterName, PostProcessor: \"function(input) input\", GenerateDir: \"generated\", GenerateShortNames: false, PruneParams: false, ClusterOutputDir: RootConfig.ClusterDir, } if cmdInitFlags.Interactive { prompt := &survey.Input{ Message: \"Set the cluster configuration directory\", Default: RootConfig.ClusterDir, Help: \"Set the root directory to store cluster configurations, optionally including subdirectories\", } util.FatalErrorCheck(\"Invalid cluster directory\", survey.AskOne(prompt, &cSpec.ClusterOutputDir)) prompt = &survey.Input{ Message: \"Set the cluster name\", Default: cmdInitFlags.ClusterName, Help: \"Distinct name for the cluster\", } util.FatalErrorCheck(\"Invalid cluster name\", survey.AskOne(prompt, &cSpec.Name)) promptB := &survey.Confirm{ Message: \"Generate short names for output file names?\", Default: cSpec.GenerateShortNames, Help: \"Shortens component names and file structure\", } util.FatalErrorCheck(\"Invalid option\", survey.AskOne(promptB, &cSpec.GenerateShortNames)) promptB = &survey.Confirm{ Message: \"Prune component parameters?\", Default: cSpec.PruneParams, Help: \"This removes empty and null parameters from configuration\", } util.FatalErrorCheck(\"Invalid option\", survey.AskOne(promptB, &cSpec.PruneParams)) } util.FatalErrorCheck( \"Error generating cluster jsonnet file\", kr8init.GenerateClusterJsonnet(cSpec, cSpec.ClusterOutputDir), ) }, } InitCmd represents the command. Various subcommands are available to initialize different components of kr8. var InitCmd = &cobra.Command{ Use: \"init\", Short: \"Initialize kr8 config repos, components and clusters\", Long: `kr8 requires specific directories and exists for its config to work. This init command helps in creating directory structure for repos, clusters and components`, } var InitComponentCmd = &cobra.Command{ Use: \"component [flags]\", Short: \"Init a new component config file\", Long: \"Initialize a new component configuration file\", Run: func(cmd *cobra.Command, args []string) { if cmdInitFlags.Interactive { prompt := &survey.Input{ Message: \"Enter component directory\", Default: RootConfig.ComponentDir, Help: \"Enter the root directory to store components in\", } util.FatalErrorCheck(\"Invalid component directory\", survey.AskOne(prompt, &RootConfig.ComponentDir)) prompt = &survey.Input{ Message: \"Enter component name\", Default: cmdInitFlags.ComponentName, Help: \"Enter the name of the component you want to create\", } util.FatalErrorCheck(\"Invalid component name\", survey.AskOne(prompt, &cmdInitFlags.ComponentName)) promptS := &survey.Select{ Message: \"Select component type\", Options: []string{\"jsonnet\", \"yml\", \"tpl\", \"chart\"}, Help: \"Select the type of component you want to create\", Default: \"jsonnet\", Description: func(value string, index int) string { switch value { case \"jsonnet\": return \"Use a Jsonnet file to describe the component resources\" case \"chart\": return \"Use a Helm chart to describe the component resources\" case \"yml\": return \"Use a yml (docker-compose) file to describe the component resources\" case \"tpl\": return \"Use a template file to describe the component resources\" default: return \"\" } }, } util.FatalErrorCheck(\"Invalid component type\", survey.AskOne(promptS, &cmdInitFlags.ComponentType)) } util.FatalErrorCheck( \"Error generating component jsonnet\", kr8init.GenerateComponentJsonnet(cmdInitFlags, RootConfig.ComponentDir), ) }, } Initializes a new kr8 configuration repository Directory tree: components/ clusters/ lib/ generated/ var InitRepoCmd = &cobra.Command{ Use: \"repo [flags] dir\", Args: cobra.MinimumNArgs(1), Short: \"Initialize a new kr8 config repo\", Long: `Initialize a new kr8 config repo by downloading the kr8 config skeleton repo and initialize a git repo so you can get started`, Run: func(cmd *cobra.Command, args []string) { if len(args) == 0 { log.Fatal().Msg(\"Error: no directory specified\") } outDir := args[len(args)-1] log.Debug().Msg(\"Initializing kr8 config repo in \" + outDir) if cmdInitFlags.InitUrl != \"\" { util.FatalErrorCheck( \"Issue fetching repo\", util.FetchRepoUrl(cmdInitFlags.InitUrl, outDir, !cmdInitFlags.Fetch), ) return } cmdInitOptions := kr8init.Kr8InitOptions{ InitUrl: cmdInitFlags.InitUrl, ClusterName: cmdInitFlags.ClusterName, ComponentName: \"example-component\", ComponentType: \"jsonnet\", Interactive: false, Fetch: false, } clusterOptions := types.Kr8ClusterSpec{ Name: cmdInitFlags.ClusterName, PostProcessor: \"\", GenerateDir: \"generated\", GenerateShortNames: false, PruneParams: false, ClusterOutputDir: \"generated\" + \"/\" + cmdInitFlags.ClusterName, } util.FatalErrorCheck( \"Issue creating cluster.jsonnet\", kr8init.GenerateClusterJsonnet(clusterOptions, outDir+\"/clusters\"), ) util.FatalErrorCheck( \"Issue creating example component.jsonnet\", kr8init.GenerateComponentJsonnet(cmdInitOptions, outDir+\"/components\"), ) util.FatalErrorCheck( \"Issue creating lib folder\", kr8init.GenerateLib(cmdInitFlags.Fetch, outDir+\"/lib\"), ) util.FatalErrorCheck( \"Issue creating Readme.md\", kr8init.GenerateReadme(outDir, cmdInitOptions, clusterOptions), ) }, } var JsonnetCmd = &cobra.Command{ Use: \"jsonnet\", Short: \"Jsonnet utilities\", Long: `Utility commands to process jsonnet`, } var JsonnetRenderCmd = &cobra.Command{ Use: \"render [flags] file [file ...]\", Short: \"Render a jsonnet file\", Long: `Render a jsonnet file to JSON or YAML`, Args: cobra.MinimumNArgs(1), Run: func(cmd *cobra.Command, args []string) { for _, f := range args { err := jvm.JsonnetRender(cmdFlagsJsonnet, f, RootConfig.VMConfig) if err != nil { log.Fatal().Str(\"file\", f).Err(err).Msg(\"error rendering jsonnet file\") } } }, } var RenderCmd = &cobra.Command{ Use: \"render\", Short: \"Render files\", Long: `Render files in jsonnet or YAML`, } var RenderHelmCmd = &cobra.Command{ Use: \"helm\", Short: \"Clean YAML stream from Helm Template output - Reads from Stdin\", Long: `Removes Null YAML objects from a YAML stream`, Run: func(cmd *cobra.Command, args []string) { decoder := yaml.NewYAMLReader(bufio.NewReader(os.Stdin)) jsa := [][]byte{} for { bytes, err := decoder.Read() if errors.Is(err, io.EOF) { break } else if err != nil { util.FatalErrorCheck(\"Error decoding yaml stream\", err) } if len(bytes) == 0 { continue } jsonData, err := yaml.ToJSON(bytes) util.FatalErrorCheck(\"Error converting yaml to JSON\", err) if string(jsonData) == \"null\" { continue } _, _, err = unstructured.UnstructuredJSONScheme.Decode(jsonData, nil, nil) util.FatalErrorCheck(\"Error handling unstructured JSON\", err) jsa = append(jsa, jsonData) } for _, j := range jsa { out, err := goyaml.JSONToYAML(j) util.FatalErrorCheck(\"Error encoding JSON to YAML\", err) fmt.Println(\"---\") fmt.Println(string(out)) } }, } var RenderJsonnetCmd = &cobra.Command{ Use: \"jsonnet file [file ...]\", Short: \"Render a jsonnet file\", Long: `Render a jsonnet file to JSON or YAML`, Args: cobra.MinimumNArgs(1), Run: func(cmd *cobra.Command, args []string) { for _, fileName := range args { err := jvm.JsonnetRender( types.CmdJsonnetOptions{ Prune: cmdRenderFlags.Prune, ClusterParams: cmdRenderFlags.ClusterParams, Cluster: cmdRenderFlags.Cluster, Component: cmdRenderFlags.ComponentName, Format: cmdRenderFlags.Format, Color: false, }, fileName, RootConfig.VMConfig) if err != nil { log.Fatal().Str(\"filename\", fileName).Err(err).Msg(\"error rendering jsonnet\") } } }, } RootCmd represents the base command when called without any subcommands. var RootCmd = &cobra.Command{ Use: \"kr8\", Short: \"A jsonnet-powered config management tool\", Long: `An opinionated configuration management tool for Kubernetes Clusters powered by jsonnet`, } Print out versions of packages in use. Chore() - Updated manually. var VersionCmd = &cobra.Command{ Use: \"version\", Short: \"Return the current version of kr8+\", Long: `return the current version of kr8+`, Run: func(cmd *cobra.Command, args []string) { fmt.Println(RootCmd.Use + \"+ Version: \" + version) info, ok := debug.ReadBuildInfo() if !ok { log.Fatal().Msg(\"could not read build info\") } stamp := retrieveStamp(info) fmt.Printf(\" Built with %s on %s\\n\", stamp.InfoGoCompiler, stamp.InfoBuildTime) fmt.Printf(\" VCS revision: %s\\n\", stamp.VCSRevision) fmt.Printf(\" Go version %s, GOOS %s, GOARCH %s\\n\", info.GoVersion, stamp.InfoGOOS, stamp.InfoGOARCH) fmt.Print(\" Dependencies:\\n\") for _, mod := range retrieveDepends(info) { fmt.Printf(\" %s\\n\", mod) } }, }","title":"Variables"},{"location":"godoc/kr8-cmd/#func-configurelogger","text":"func ConfigureLogger(debug bool)","title":"func ConfigureLogger"},{"location":"godoc/kr8-cmd/#func-execute","text":"func Execute(ver string) Execute adds all child commands to the root command sets flags appropriately. This is called by main.main(). It only needs to happen once to the rootCmd.","title":"func Execute"},{"location":"godoc/kr8-cmd/#func-generatecommand","text":"func GenerateCommand(cmd *cobra.Command, args []string) This function generates the components for each cluster in parallel. It uses a wait group to ensure that all clusters have been processed before exiting.","title":"func GenerateCommand"},{"location":"godoc/kr8-cmd/#func-initconfig","text":"func InitConfig() InitConfig reads in config file and ENV variables if set.","title":"func InitConfig"},{"location":"godoc/kr8-cmd/#type-cmdgenerateoptions","text":"Stores the options for the 'generate' command. type CmdGenerateOptions struct { // Stores the path to the cluster params file ClusterParamsFile string // Stores the output directory for generated files GenerateDir string // Stores the filters to apply to clusters and components when generating files Filters util.PathFilterOptions }","title":"type CmdGenerateOptions"},{"location":"godoc/kr8-cmd/#type-cmdgetoptions","text":"Holds the options for the get command. type CmdGetOptions struct { // ClusterParams provides a way to provide cluster params as a single file. // This can be combined with --cluster to override the cluster. ClusterParams string // If true, just prints result instead of placing in table NoTable bool // Field to display from the resource FieldName string // Cluster to get resources from Cluster string // Component to get resources from Component string // Param to display from the resource ParamField string }","title":"type CmdGetOptions"},{"location":"godoc/kr8-cmd/#type-cmdrenderoptions","text":"Contains parameters for the kr8 render command. type CmdRenderOptions struct { // Prune null and empty objects from rendered json Prune bool // Filename to read cluster configuration from ClusterParams string // Name of the component to render ComponentName string // Name of the cluster to render Cluster string // Format of the output (yaml, json or stream) Format string }","title":"type CmdRenderOptions"},{"location":"godoc/kr8-cmd/#type-cmdrootoptions","text":"Default options that are available to all commands. type CmdRootOptions struct { // kr8 config base directory BaseDir string // kr8 cluster directory ClusterDir string // kr8 component directory ComponentDir string // A config file with kr8 configuration ConfigFile string // parallelism - defaults to runtime.GOMAXPROCS(0) Parallel int // log more information about what kr8 is doing. Overrides --loglevel Debug bool // set log level LogLevel string // enable colorized output (default true). Set to false to disable\") Color bool // contains ingormation to configure jsonnet vm VMConfig types.VMConfig } var RootConfig CmdRootOptions","title":"type CmdRootOptions"},{"location":"godoc/kr8-cmd/#type-stamp","text":"type Stamp struct { InfoGoVersion string InfoGoCompiler string InfoGOARCH string InfoGOOS string InfoBuildTime string VCSRevision string }","title":"type Stamp"},{"location":"godoc/kr8-generate/","text":"generate import \"github.com/ice-bergtech/kr8/pkg/generate\" Package generate implements the logic for generating output files based on input data. Combines a directory of cluster configurations with a directory of components (along with some Jsonnet libs) to generate output files. The package prepares a Jsonnet VM and loads the necessary libraries and extvars. A new VM is created for each component. Index func CheckIfUpdateNeeded(outFile string, outStr string) (bool, error) func CleanOutputDir(outputFileMap map[string]bool, componentOutputDir string) error func GenProcessCluster(clusterName string, clusterdir string, baseDir string, generateDirOverride string, kr8Opts types.Kr8Opts, clusterParamsFile string, filters util.PathFilterOptions, vmConfig types.VMConfig, pool *ants.Pool) error func GenProcessComponent(vmconfig types.VMConfig, componentName string, kr8Spec types.Kr8ClusterSpec, kr8Opts types.Kr8Opts, config string, allConfig *safeString, filters util.PathFilterOptions, paramsFile string) error func GenerateIncludesFiles(includesFiles []types.Kr8ComponentSpecIncludeObject, kr8Spec types.Kr8ClusterSpec, kr8Opts types.Kr8Opts, config string, componentName string, compPath string, componentOutputDir string, jvm *jsonnet.VM) (map[string]bool, error) func GetClusterParams(clusterDir string, vmConfig types.VMConfig) (map[string]string, error) func ProcessFile(inputFile string, outputFile string, kr8Spec types.Kr8ClusterSpec, componentName string, config string, incInfo types.Kr8ComponentSpecIncludeObject, jvm *jsonnet.VM) (string, error) func SetupAndConfigureVM(vmconfig types.VMConfig, config string, kr8Spec types.Kr8ClusterSpec, componentName string, compSpec types.Kr8ComponentSpec, allConfig *safeString, filters util.PathFilterOptions, paramsFile string, kr8Opts types.Kr8Opts) (*jsonnet.VM, string, error) func SetupJvmForComponent(vmconfig types.VMConfig, config string, kr8Spec types.Kr8ClusterSpec, componentName string) (*jsonnet.VM, error) func CheckIfUpdateNeeded func CheckIfUpdateNeeded(outFile string, outStr string) (bool, error) Check if a file needs updating based on its current contents and the new contents. func CleanOutputDir func CleanOutputDir(outputFileMap map[string]bool, componentOutputDir string) error func GenProcessCluster func GenProcessCluster(clusterName string, clusterdir string, baseDir string, generateDirOverride string, kr8Opts types.Kr8Opts, clusterParamsFile string, filters util.PathFilterOptions, vmConfig types.VMConfig, pool *ants.Pool) error func GenProcessComponent func GenProcessComponent(vmconfig types.VMConfig, componentName string, kr8Spec types.Kr8ClusterSpec, kr8Opts types.Kr8Opts, config string, allConfig *safeString, filters util.PathFilterOptions, paramsFile string) error func GenerateIncludesFiles func GenerateIncludesFiles(includesFiles []types.Kr8ComponentSpecIncludeObject, kr8Spec types.Kr8ClusterSpec, kr8Opts types.Kr8Opts, config string, componentName string, compPath string, componentOutputDir string, jvm *jsonnet.VM) (map[string]bool, error) func GetClusterParams func GetClusterParams(clusterDir string, vmConfig types.VMConfig) (map[string]string, error) func ProcessFile func ProcessFile(inputFile string, outputFile string, kr8Spec types.Kr8ClusterSpec, componentName string, config string, incInfo types.Kr8ComponentSpecIncludeObject, jvm *jsonnet.VM) (string, error) Process an includes file. Based on the extension, the file is processed differently. .jsonnet: Imported and processed using jsonnet VM. .yml, .yaml: Imported and processed through native function ParseYaml. .tpl, .tmpl: Processed using component config and Sprig templating. func SetupAndConfigureVM func SetupAndConfigureVM(vmconfig types.VMConfig, config string, kr8Spec types.Kr8ClusterSpec, componentName string, compSpec types.Kr8ComponentSpec, allConfig *safeString, filters util.PathFilterOptions, paramsFile string, kr8Opts types.Kr8Opts) (*jsonnet.VM, string, error) func SetupJvmForComponent func SetupJvmForComponent(vmconfig types.VMConfig, config string, kr8Spec types.Kr8ClusterSpec, componentName string) (*jsonnet.VM, error) This function sets up the JVM for a given component. It registers native functions, sets up post-processing, and prunes parameters as required. It's faster to create this VM for each component, rather than re-use. Default postprocessor just copies input to output.","title":"kr8 generate"},{"location":"godoc/kr8-generate/#generate","text":"import \"github.com/ice-bergtech/kr8/pkg/generate\" Package generate implements the logic for generating output files based on input data. Combines a directory of cluster configurations with a directory of components (along with some Jsonnet libs) to generate output files. The package prepares a Jsonnet VM and loads the necessary libraries and extvars. A new VM is created for each component.","title":"generate"},{"location":"godoc/kr8-generate/#index","text":"func CheckIfUpdateNeeded(outFile string, outStr string) (bool, error) func CleanOutputDir(outputFileMap map[string]bool, componentOutputDir string) error func GenProcessCluster(clusterName string, clusterdir string, baseDir string, generateDirOverride string, kr8Opts types.Kr8Opts, clusterParamsFile string, filters util.PathFilterOptions, vmConfig types.VMConfig, pool *ants.Pool) error func GenProcessComponent(vmconfig types.VMConfig, componentName string, kr8Spec types.Kr8ClusterSpec, kr8Opts types.Kr8Opts, config string, allConfig *safeString, filters util.PathFilterOptions, paramsFile string) error func GenerateIncludesFiles(includesFiles []types.Kr8ComponentSpecIncludeObject, kr8Spec types.Kr8ClusterSpec, kr8Opts types.Kr8Opts, config string, componentName string, compPath string, componentOutputDir string, jvm *jsonnet.VM) (map[string]bool, error) func GetClusterParams(clusterDir string, vmConfig types.VMConfig) (map[string]string, error) func ProcessFile(inputFile string, outputFile string, kr8Spec types.Kr8ClusterSpec, componentName string, config string, incInfo types.Kr8ComponentSpecIncludeObject, jvm *jsonnet.VM) (string, error) func SetupAndConfigureVM(vmconfig types.VMConfig, config string, kr8Spec types.Kr8ClusterSpec, componentName string, compSpec types.Kr8ComponentSpec, allConfig *safeString, filters util.PathFilterOptions, paramsFile string, kr8Opts types.Kr8Opts) (*jsonnet.VM, string, error) func SetupJvmForComponent(vmconfig types.VMConfig, config string, kr8Spec types.Kr8ClusterSpec, componentName string) (*jsonnet.VM, error)","title":"Index"},{"location":"godoc/kr8-generate/#func-checkifupdateneeded","text":"func CheckIfUpdateNeeded(outFile string, outStr string) (bool, error) Check if a file needs updating based on its current contents and the new contents.","title":"func CheckIfUpdateNeeded"},{"location":"godoc/kr8-generate/#func-cleanoutputdir","text":"func CleanOutputDir(outputFileMap map[string]bool, componentOutputDir string) error","title":"func CleanOutputDir"},{"location":"godoc/kr8-generate/#func-genprocesscluster","text":"func GenProcessCluster(clusterName string, clusterdir string, baseDir string, generateDirOverride string, kr8Opts types.Kr8Opts, clusterParamsFile string, filters util.PathFilterOptions, vmConfig types.VMConfig, pool *ants.Pool) error","title":"func GenProcessCluster"},{"location":"godoc/kr8-generate/#func-genprocesscomponent","text":"func GenProcessComponent(vmconfig types.VMConfig, componentName string, kr8Spec types.Kr8ClusterSpec, kr8Opts types.Kr8Opts, config string, allConfig *safeString, filters util.PathFilterOptions, paramsFile string) error","title":"func GenProcessComponent"},{"location":"godoc/kr8-generate/#func-generateincludesfiles","text":"func GenerateIncludesFiles(includesFiles []types.Kr8ComponentSpecIncludeObject, kr8Spec types.Kr8ClusterSpec, kr8Opts types.Kr8Opts, config string, componentName string, compPath string, componentOutputDir string, jvm *jsonnet.VM) (map[string]bool, error)","title":"func GenerateIncludesFiles"},{"location":"godoc/kr8-generate/#func-getclusterparams","text":"func GetClusterParams(clusterDir string, vmConfig types.VMConfig) (map[string]string, error)","title":"func GetClusterParams"},{"location":"godoc/kr8-generate/#func-processfile","text":"func ProcessFile(inputFile string, outputFile string, kr8Spec types.Kr8ClusterSpec, componentName string, config string, incInfo types.Kr8ComponentSpecIncludeObject, jvm *jsonnet.VM) (string, error) Process an includes file. Based on the extension, the file is processed differently. .jsonnet: Imported and processed using jsonnet VM. .yml, .yaml: Imported and processed through native function ParseYaml. .tpl, .tmpl: Processed using component config and Sprig templating.","title":"func ProcessFile"},{"location":"godoc/kr8-generate/#func-setupandconfigurevm","text":"func SetupAndConfigureVM(vmconfig types.VMConfig, config string, kr8Spec types.Kr8ClusterSpec, componentName string, compSpec types.Kr8ComponentSpec, allConfig *safeString, filters util.PathFilterOptions, paramsFile string, kr8Opts types.Kr8Opts) (*jsonnet.VM, string, error)","title":"func SetupAndConfigureVM"},{"location":"godoc/kr8-generate/#func-setupjvmforcomponent","text":"func SetupJvmForComponent(vmconfig types.VMConfig, config string, kr8Spec types.Kr8ClusterSpec, componentName string) (*jsonnet.VM, error) This function sets up the JVM for a given component. It registers native functions, sets up post-processing, and prunes parameters as required. It's faster to create this VM for each component, rather than re-use. Default postprocessor just copies input to output.","title":"func SetupJvmForComponent"},{"location":"godoc/kr8-init/","text":"kr8_init import \"github.com/ice-bergtech/kr8/pkg/kr8_init\" Index func GenerateChartJsonnet(compJson types.Kr8ComponentJsonnet, componentOptions Kr8InitOptions, folderDir string) error func GenerateChartTaskfile(comp types.Kr8ComponentJsonnet, componentOptions Kr8InitOptions, folderDir string) error func GenerateClusterJsonnet(cSpec types.Kr8ClusterSpec, dstDir string) error func GenerateComponentJsonnet(componentOptions Kr8InitOptions, dstDir string) error func GenerateLib(fetch bool, dstDir string) error func GenerateReadme(dstDir string, cmdOptions Kr8InitOptions, clusterSpec types.Kr8ClusterSpec) error func InitComponentChart(dstDir string, componentOptions Kr8InitOptions, compJson types.Kr8ComponentJsonnet) error func InitComponentJsonnet(compJson types.Kr8ComponentJsonnet, dstDir string, componentOptions Kr8InitOptions) error func InitComponentTemplate(compJson types.Kr8ComponentJsonnet, dstDir string, componentOptions Kr8InitOptions) error func InitComponentYaml(compJson types.Kr8ComponentJsonnet, dstDir string, componentOptions Kr8InitOptions) error type Kr8InitOptions func GenerateChartJsonnet func GenerateChartJsonnet(compJson types.Kr8ComponentJsonnet, componentOptions Kr8InitOptions, folderDir string) error Generates a jsonnet files that references a local helm chart. func GenerateChartTaskfile func GenerateChartTaskfile(comp types.Kr8ComponentJsonnet, componentOptions Kr8InitOptions, folderDir string) error Generates a go-task taskfile that's setup to download a helm chart into a local `vendor` directory. func GenerateClusterJsonnet func GenerateClusterJsonnet(cSpec types.Kr8ClusterSpec, dstDir string) error Generate a cluster.jsonnet file based on the provided Kr8ClusterSpec and store it in the specified directory. func GenerateComponentJsonnet func GenerateComponentJsonnet(componentOptions Kr8InitOptions, dstDir string) error Generate default component kr8_spec values and store in params.jsonnet. Based on the type: jsonnet: create a component.jsonnet file and reference it from the params.jsonnet file yml: leave a note in the params.jsonnet file about where and how the yml files can be referenced chart: generate a simple taskfile that handles vendoring the chart data func GenerateLib func GenerateLib(fetch bool, dstDir string) error Downloads a starter kr8 jsonnet lib from github. If fetch is true, downloads the repo in the /lib directory. If false, prints the git commands to run. Repo: https://github.com/ice-bergtech/kr8-libsonnet . return util.FetchRepoUrl(\"https://github.com/ice-bergtech/kr8-libsonnet\", dstDir+\"/kr8-lib\", !fetch). func GenerateReadme func GenerateReadme(dstDir string, cmdOptions Kr8InitOptions, clusterSpec types.Kr8ClusterSpec) error Generates a starter readme for the repo, and writes it to the destination directory. func InitComponentChart func InitComponentChart(dstDir string, componentOptions Kr8InitOptions, compJson types.Kr8ComponentJsonnet) error Initializes the basic parts of a helm chart component. func InitComponentJsonnet func InitComponentJsonnet(compJson types.Kr8ComponentJsonnet, dstDir string, componentOptions Kr8InitOptions) error Initializes the basic parts of a jsonnet-based component. func InitComponentTemplate func InitComponentTemplate(compJson types.Kr8ComponentJsonnet, dstDir string, componentOptions Kr8InitOptions) error Initializes the based parts of a template-based component. func InitComponentYaml func InitComponentYaml(compJson types.Kr8ComponentJsonnet, dstDir string, componentOptions Kr8InitOptions) error Initializes the basic parts of a yaml-based component. type Kr8InitOptions Kr8InitOptions defines the options used by the init subcommands. type Kr8InitOptions struct { // URL to fetch the skeleton directory from InitUrl string // Name of the cluster to initialize ClusterName string // Name of the component to initialize ComponentName string // Type of component to initialize (e.g. jsonnet, yml, chart, compose) ComponentType string // Determines whether to run in interactive mode Interactive bool // Determines whether to fetch remote resources Fetch bool }","title":"kr8 init"},{"location":"godoc/kr8-init/#kr8_init","text":"import \"github.com/ice-bergtech/kr8/pkg/kr8_init\"","title":"kr8_init"},{"location":"godoc/kr8-init/#index","text":"func GenerateChartJsonnet(compJson types.Kr8ComponentJsonnet, componentOptions Kr8InitOptions, folderDir string) error func GenerateChartTaskfile(comp types.Kr8ComponentJsonnet, componentOptions Kr8InitOptions, folderDir string) error func GenerateClusterJsonnet(cSpec types.Kr8ClusterSpec, dstDir string) error func GenerateComponentJsonnet(componentOptions Kr8InitOptions, dstDir string) error func GenerateLib(fetch bool, dstDir string) error func GenerateReadme(dstDir string, cmdOptions Kr8InitOptions, clusterSpec types.Kr8ClusterSpec) error func InitComponentChart(dstDir string, componentOptions Kr8InitOptions, compJson types.Kr8ComponentJsonnet) error func InitComponentJsonnet(compJson types.Kr8ComponentJsonnet, dstDir string, componentOptions Kr8InitOptions) error func InitComponentTemplate(compJson types.Kr8ComponentJsonnet, dstDir string, componentOptions Kr8InitOptions) error func InitComponentYaml(compJson types.Kr8ComponentJsonnet, dstDir string, componentOptions Kr8InitOptions) error type Kr8InitOptions","title":"Index"},{"location":"godoc/kr8-init/#func-generatechartjsonnet","text":"func GenerateChartJsonnet(compJson types.Kr8ComponentJsonnet, componentOptions Kr8InitOptions, folderDir string) error Generates a jsonnet files that references a local helm chart.","title":"func GenerateChartJsonnet"},{"location":"godoc/kr8-init/#func-generatecharttaskfile","text":"func GenerateChartTaskfile(comp types.Kr8ComponentJsonnet, componentOptions Kr8InitOptions, folderDir string) error Generates a go-task taskfile that's setup to download a helm chart into a local `vendor` directory.","title":"func GenerateChartTaskfile"},{"location":"godoc/kr8-init/#func-generateclusterjsonnet","text":"func GenerateClusterJsonnet(cSpec types.Kr8ClusterSpec, dstDir string) error Generate a cluster.jsonnet file based on the provided Kr8ClusterSpec and store it in the specified directory.","title":"func GenerateClusterJsonnet"},{"location":"godoc/kr8-init/#func-generatecomponentjsonnet","text":"func GenerateComponentJsonnet(componentOptions Kr8InitOptions, dstDir string) error Generate default component kr8_spec values and store in params.jsonnet. Based on the type: jsonnet: create a component.jsonnet file and reference it from the params.jsonnet file yml: leave a note in the params.jsonnet file about where and how the yml files can be referenced chart: generate a simple taskfile that handles vendoring the chart data","title":"func GenerateComponentJsonnet"},{"location":"godoc/kr8-init/#func-generatelib","text":"func GenerateLib(fetch bool, dstDir string) error Downloads a starter kr8 jsonnet lib from github. If fetch is true, downloads the repo in the /lib directory. If false, prints the git commands to run. Repo: https://github.com/ice-bergtech/kr8-libsonnet . return util.FetchRepoUrl(\"https://github.com/ice-bergtech/kr8-libsonnet\", dstDir+\"/kr8-lib\", !fetch).","title":"func GenerateLib"},{"location":"godoc/kr8-init/#func-generatereadme","text":"func GenerateReadme(dstDir string, cmdOptions Kr8InitOptions, clusterSpec types.Kr8ClusterSpec) error Generates a starter readme for the repo, and writes it to the destination directory.","title":"func GenerateReadme"},{"location":"godoc/kr8-init/#func-initcomponentchart","text":"func InitComponentChart(dstDir string, componentOptions Kr8InitOptions, compJson types.Kr8ComponentJsonnet) error Initializes the basic parts of a helm chart component.","title":"func InitComponentChart"},{"location":"godoc/kr8-init/#func-initcomponentjsonnet","text":"func InitComponentJsonnet(compJson types.Kr8ComponentJsonnet, dstDir string, componentOptions Kr8InitOptions) error Initializes the basic parts of a jsonnet-based component.","title":"func InitComponentJsonnet"},{"location":"godoc/kr8-init/#func-initcomponenttemplate","text":"func InitComponentTemplate(compJson types.Kr8ComponentJsonnet, dstDir string, componentOptions Kr8InitOptions) error Initializes the based parts of a template-based component.","title":"func InitComponentTemplate"},{"location":"godoc/kr8-init/#func-initcomponentyaml","text":"func InitComponentYaml(compJson types.Kr8ComponentJsonnet, dstDir string, componentOptions Kr8InitOptions) error Initializes the basic parts of a yaml-based component.","title":"func InitComponentYaml"},{"location":"godoc/kr8-init/#type-kr8initoptions","text":"Kr8InitOptions defines the options used by the init subcommands. type Kr8InitOptions struct { // URL to fetch the skeleton directory from InitUrl string // Name of the cluster to initialize ClusterName string // Name of the component to initialize ComponentName string // Type of component to initialize (e.g. jsonnet, yml, chart, compose) ComponentType string // Determines whether to run in interactive mode Interactive bool // Determines whether to fetch remote resources Fetch bool }","title":"type Kr8InitOptions"},{"location":"godoc/kr8-jsonnet/","text":"jnetvm import \"github.com/ice-bergtech/kr8/pkg/jnetvm\" Package jvm contains the jsonnet rendering logic. Index func JsonnetRender(cmdFlagsJsonnet types.CmdJsonnetOptions, filename string, vmConfig types.VMConfig) error func JsonnetRenderClusterParams(vmconfig types.VMConfig, clusterName string, componentNames []string, clusterParams string, prune bool) (string, error) func JsonnetRenderClusterParamsOnly(vmconfig types.VMConfig, clusterName string, clusterParams string, prune bool) (string, error) func JsonnetRenderFiles(vmConfig types.VMConfig, files []string, param string, prune bool, prepend string, source string) (string, error) func JsonnetVM(vmconfig types.VMConfig) (*jsonnet.VM, error) func MergeComponentDefaults(componentMap map[string]types.Kr8ClusterComponentRef, componentNames []string, vmconfig types.VMConfig) (string, error) func NativeHelmTemplate() *jsonnet.NativeFunction func NativeHelp(allFuncs []*jsonnet.NativeFunction) *jsonnet.NativeFunction func NativeKompose() *jsonnet.NativeFunction func NativeNetAddressARPA() *jsonnet.NativeFunction func NativeNetAddressBinary() *jsonnet.NativeFunction func NativeNetAddressCalcSubnetsV4() *jsonnet.NativeFunction func NativeNetAddressCalcSubnetsV6() *jsonnet.NativeFunction func NativeNetAddressCompare() *jsonnet.NativeFunction func NativeNetAddressDec() *jsonnet.NativeFunction func NativeNetAddressDecBy() *jsonnet.NativeFunction func NativeNetAddressDelta() *jsonnet.NativeFunction func NativeNetAddressHex() *jsonnet.NativeFunction func NativeNetAddressInc() *jsonnet.NativeFunction func NativeNetAddressIncBy() *jsonnet.NativeFunction func NativeNetAddressNetsBetween() *jsonnet.NativeFunction func NativeNetAddressSort() *jsonnet.NativeFunction func NativeNetIPInfo() *jsonnet.NativeFunction func NativeNetUrl() *jsonnet.NativeFunction func NativeRegexEscape() *jsonnet.NativeFunction func NativeRegexMatch() *jsonnet.NativeFunction func NativeRegexSubst() *jsonnet.NativeFunction func NativeSprigTemplate() *jsonnet.NativeFunction func RegisterNativeFuncs(jvm *jsonnet.VM) type IPV4 func IPV4Info(rawIP string) (*IPV4, error) type IPV6 func IPV6Info(rawIP string) (*IPV6, error) type NativeFuncURL func JsonnetRender func JsonnetRender(cmdFlagsJsonnet types.CmdJsonnetOptions, filename string, vmConfig types.VMConfig) error Renders a jsonnet file with the specified options. func JsonnetRenderClusterParams func JsonnetRenderClusterParams(vmconfig types.VMConfig, clusterName string, componentNames []string, clusterParams string, prune bool) (string, error) Render cluster params, merged with one or more component's parameters. Empty componentName list renders all component parameters. func JsonnetRenderClusterParamsOnly func JsonnetRenderClusterParamsOnly(vmconfig types.VMConfig, clusterName string, clusterParams string, prune bool) (string, error) Only render cluster params (_cluster), without components. func JsonnetRenderFiles func JsonnetRenderFiles(vmConfig types.VMConfig, files []string, param string, prune bool, prepend string, source string) (string, error) Takes a list of jsonnet files and imports each one. Formats the string for jsonnet using \"+\". func JsonnetVM func JsonnetVM(vmconfig types.VMConfig) (*jsonnet.VM, error) Create a Jsonnet VM to run commands in. func MergeComponentDefaults func MergeComponentDefaults(componentMap map[string]types.Kr8ClusterComponentRef, componentNames []string, vmconfig types.VMConfig) (string, error) func NativeHelmTemplate func NativeHelmTemplate() *jsonnet.NativeFunction Allows executing helm template to process a helm chart and make available to kr8 configuration. Source: https://github.com/grafana/tanka/blob/v0.27.1/pkg/helm/template.go#L23 func NativeHelp func NativeHelp(allFuncs []*jsonnet.NativeFunction) *jsonnet.NativeFunction func NativeKompose func NativeKompose() *jsonnet.NativeFunction Allows converting a docker-compose file string into kubernetes resources using kompose. Files in the directory must be in the format `[docker-]compose.ym[a]l`. Source: https://github.com/kubernetes/kompose/blob/main/cmd/convert.go Inputs: `inFile`, `outPath`, `opts`. func NativeNetAddressARPA func NativeNetAddressARPA() *jsonnet.NativeFunction Convert address to addr.APRA DNS name. Inputs: \"rawIP\". func NativeNetAddressBinary func NativeNetAddressBinary() *jsonnet.NativeFunction Return binary string representation of address. This is the default stringer format for v6 net.IP. Inputs: \"rawIP\". func NativeNetAddressCalcSubnetsV4 func NativeNetAddressCalcSubnetsV4() *jsonnet.NativeFunction Return a list of networks of a given masklen that can be extracted from an IPv4 CIDR. The mask provided must be a larger-integer than the current mask. If set to 0 Subnet carves the network in half. Inputs: \"ip4Net\", \"maskLen\". func NativeNetAddressCalcSubnetsV6 func NativeNetAddressCalcSubnetsV6() *jsonnet.NativeFunction Return a list of networks of a given masklen that can be extracted from an IPv6 CIDR. The mask provided must be a larger-integer than the current mask. If set to 0 Subnet carves the network in half. Hostmask must be provided if desired. Inputs: \"ip6Net\", \"netMaskLen\", \"hostMaskLen\". func NativeNetAddressCompare func NativeNetAddressCompare() *jsonnet.NativeFunction Compare two addresses. 0 if a==b, -1 if a\\<b, 1 if a>b. func NativeNetAddressDec func NativeNetAddressDec() *jsonnet.NativeFunction PreviousIP returns a net.IP decremented by one from the input address. If you underflow the IP space the zero address is returned. Inputs: \"rawIP\". func NativeNetAddressDecBy func NativeNetAddressDecBy() *jsonnet.NativeFunction Returns a net.IP that is lower than the supplied net.IP by the supplied integer value. If you underflow the IP space the zero address is returned. Inputs: \"rawIP\", \"count\". func NativeNetAddressDelta func NativeNetAddressDelta() *jsonnet.NativeFunction Gets the delta of two addresses. Takes two net.IP's as input and returns the difference between them up to the limit of uint32. Inputs: \"rawIP, \"otherIP\". func NativeNetAddressHex func NativeNetAddressHex() *jsonnet.NativeFunction Return hex representation of address. This is the default stringer format for v6 net.IP. Inputs: \"rawIP\". func NativeNetAddressInc func NativeNetAddressInc() *jsonnet.NativeFunction NextIP returns a net.IP incremented by one from the input address. If you overflow the IP space the all-ones address is returned. Inputs: \"rawIP\". func NativeNetAddressIncBy func NativeNetAddressIncBy() *jsonnet.NativeFunction Returns a net.IP that is greater than the supplied net.IP by the supplied integer value. If you overflow the IP space the all-ones address is returned. Inputs: \"rawIP\", \"count\". func NativeNetAddressNetsBetween func NativeNetAddressNetsBetween() *jsonnet.NativeFunction Returns a slice of netblocks spanning the range between the two networks, inclusively. Returns single-address netblocks if required. Inputs: \"ipNet\", \"otherIPNet\". func NativeNetAddressSort func NativeNetAddressSort() *jsonnet.NativeFunction Sort list of ip addresses. Inputs: \"listIPs\". func NativeNetIPInfo func NativeNetIPInfo() *jsonnet.NativeFunction net.IP tools. https://github.com/c-robinson/iplib . Inputs: \"rawIP\". func NativeNetUrl func NativeNetUrl() *jsonnet.NativeFunction Decode URL information from a string. Based on https://github.com/lintnet/go-jsonnet-native-functions/blob/main/pkg/net/url/url.go . Inputs: \"rawURL\". func NativeRegexEscape func NativeRegexEscape() *jsonnet.NativeFunction Escapes a string for use in regex. Inputs: \"str\". func NativeRegexMatch func NativeRegexMatch() *jsonnet.NativeFunction Matches a string against a regex pattern. Inputs: \"regex\", \"string\". func NativeRegexSubst func NativeRegexSubst() *jsonnet.NativeFunction Substitutes a regex pattern in a string with another string. Inputs: \"regex\", \"src\", \"repl\". func NativeSprigTemplate func NativeSprigTemplate() *jsonnet.NativeFunction Uses sprig to process passed in config data and template. Sprig template guide: https://masterminds.github.io/sprig/ . Inputs: \"config\" \"templateStr\". func RegisterNativeFuncs func RegisterNativeFuncs(jvm *jsonnet.VM) Registers additional native functions in the jsonnet VM. These functions are used to extend the functionality of jsonnet. Adds on to functions part of the jsonnet stdlib: https://jsonnet.org/ref/stdlib.html type IPV4 type IPV4 struct { IP string Mask int CIDR string Count uint32 FirstAddress string LastAddress string Broadcast string } func IPV4Info func IPV4Info(rawIP string) (*IPV4, error) type IPV6 type IPV6 struct { IP string NetMask string HostMask string CIDR string Count uint128.Uint128 FirstAddress string LastAddress string } func IPV6Info func IPV6Info(rawIP string) (*IPV6, error) type NativeFuncURL Contains the url information. type NativeFuncURL struct { Scheme string // encoded opaque data Opaque string // username information Username string // Whether the password field is set PasswordSet bool // password information Password string // host or host:port (see Hostname and Port methods) Host string // path (relative paths may omit leading slash) Path string // encoded path hint (see EscapedPath method) RawPath string // query values Query map[string]interface{} // encoded query values, without '?' RawQuery string // fragment for references, without '#' Fragment string // encoded fragment hint (see EscapedFragment method) RawFragment string }","title":"kr8 jsonnet"},{"location":"godoc/kr8-jsonnet/#jnetvm","text":"import \"github.com/ice-bergtech/kr8/pkg/jnetvm\" Package jvm contains the jsonnet rendering logic.","title":"jnetvm"},{"location":"godoc/kr8-jsonnet/#index","text":"func JsonnetRender(cmdFlagsJsonnet types.CmdJsonnetOptions, filename string, vmConfig types.VMConfig) error func JsonnetRenderClusterParams(vmconfig types.VMConfig, clusterName string, componentNames []string, clusterParams string, prune bool) (string, error) func JsonnetRenderClusterParamsOnly(vmconfig types.VMConfig, clusterName string, clusterParams string, prune bool) (string, error) func JsonnetRenderFiles(vmConfig types.VMConfig, files []string, param string, prune bool, prepend string, source string) (string, error) func JsonnetVM(vmconfig types.VMConfig) (*jsonnet.VM, error) func MergeComponentDefaults(componentMap map[string]types.Kr8ClusterComponentRef, componentNames []string, vmconfig types.VMConfig) (string, error) func NativeHelmTemplate() *jsonnet.NativeFunction func NativeHelp(allFuncs []*jsonnet.NativeFunction) *jsonnet.NativeFunction func NativeKompose() *jsonnet.NativeFunction func NativeNetAddressARPA() *jsonnet.NativeFunction func NativeNetAddressBinary() *jsonnet.NativeFunction func NativeNetAddressCalcSubnetsV4() *jsonnet.NativeFunction func NativeNetAddressCalcSubnetsV6() *jsonnet.NativeFunction func NativeNetAddressCompare() *jsonnet.NativeFunction func NativeNetAddressDec() *jsonnet.NativeFunction func NativeNetAddressDecBy() *jsonnet.NativeFunction func NativeNetAddressDelta() *jsonnet.NativeFunction func NativeNetAddressHex() *jsonnet.NativeFunction func NativeNetAddressInc() *jsonnet.NativeFunction func NativeNetAddressIncBy() *jsonnet.NativeFunction func NativeNetAddressNetsBetween() *jsonnet.NativeFunction func NativeNetAddressSort() *jsonnet.NativeFunction func NativeNetIPInfo() *jsonnet.NativeFunction func NativeNetUrl() *jsonnet.NativeFunction func NativeRegexEscape() *jsonnet.NativeFunction func NativeRegexMatch() *jsonnet.NativeFunction func NativeRegexSubst() *jsonnet.NativeFunction func NativeSprigTemplate() *jsonnet.NativeFunction func RegisterNativeFuncs(jvm *jsonnet.VM) type IPV4 func IPV4Info(rawIP string) (*IPV4, error) type IPV6 func IPV6Info(rawIP string) (*IPV6, error) type NativeFuncURL","title":"Index"},{"location":"godoc/kr8-jsonnet/#func-jsonnetrender","text":"func JsonnetRender(cmdFlagsJsonnet types.CmdJsonnetOptions, filename string, vmConfig types.VMConfig) error Renders a jsonnet file with the specified options.","title":"func JsonnetRender"},{"location":"godoc/kr8-jsonnet/#func-jsonnetrenderclusterparams","text":"func JsonnetRenderClusterParams(vmconfig types.VMConfig, clusterName string, componentNames []string, clusterParams string, prune bool) (string, error) Render cluster params, merged with one or more component's parameters. Empty componentName list renders all component parameters.","title":"func JsonnetRenderClusterParams"},{"location":"godoc/kr8-jsonnet/#func-jsonnetrenderclusterparamsonly","text":"func JsonnetRenderClusterParamsOnly(vmconfig types.VMConfig, clusterName string, clusterParams string, prune bool) (string, error) Only render cluster params (_cluster), without components.","title":"func JsonnetRenderClusterParamsOnly"},{"location":"godoc/kr8-jsonnet/#func-jsonnetrenderfiles","text":"func JsonnetRenderFiles(vmConfig types.VMConfig, files []string, param string, prune bool, prepend string, source string) (string, error) Takes a list of jsonnet files and imports each one. Formats the string for jsonnet using \"+\".","title":"func JsonnetRenderFiles"},{"location":"godoc/kr8-jsonnet/#func-jsonnetvm","text":"func JsonnetVM(vmconfig types.VMConfig) (*jsonnet.VM, error) Create a Jsonnet VM to run commands in.","title":"func JsonnetVM"},{"location":"godoc/kr8-jsonnet/#func-mergecomponentdefaults","text":"func MergeComponentDefaults(componentMap map[string]types.Kr8ClusterComponentRef, componentNames []string, vmconfig types.VMConfig) (string, error)","title":"func MergeComponentDefaults"},{"location":"godoc/kr8-jsonnet/#func-nativehelmtemplate","text":"func NativeHelmTemplate() *jsonnet.NativeFunction Allows executing helm template to process a helm chart and make available to kr8 configuration. Source: https://github.com/grafana/tanka/blob/v0.27.1/pkg/helm/template.go#L23","title":"func NativeHelmTemplate"},{"location":"godoc/kr8-jsonnet/#func-nativehelp","text":"func NativeHelp(allFuncs []*jsonnet.NativeFunction) *jsonnet.NativeFunction","title":"func NativeHelp"},{"location":"godoc/kr8-jsonnet/#func-nativekompose","text":"func NativeKompose() *jsonnet.NativeFunction Allows converting a docker-compose file string into kubernetes resources using kompose. Files in the directory must be in the format `[docker-]compose.ym[a]l`. Source: https://github.com/kubernetes/kompose/blob/main/cmd/convert.go Inputs: `inFile`, `outPath`, `opts`.","title":"func NativeKompose"},{"location":"godoc/kr8-jsonnet/#func-nativenetaddressarpa","text":"func NativeNetAddressARPA() *jsonnet.NativeFunction Convert address to addr.APRA DNS name. Inputs: \"rawIP\".","title":"func NativeNetAddressARPA"},{"location":"godoc/kr8-jsonnet/#func-nativenetaddressbinary","text":"func NativeNetAddressBinary() *jsonnet.NativeFunction Return binary string representation of address. This is the default stringer format for v6 net.IP. Inputs: \"rawIP\".","title":"func NativeNetAddressBinary"},{"location":"godoc/kr8-jsonnet/#func-nativenetaddresscalcsubnetsv4","text":"func NativeNetAddressCalcSubnetsV4() *jsonnet.NativeFunction Return a list of networks of a given masklen that can be extracted from an IPv4 CIDR. The mask provided must be a larger-integer than the current mask. If set to 0 Subnet carves the network in half. Inputs: \"ip4Net\", \"maskLen\".","title":"func NativeNetAddressCalcSubnetsV4"},{"location":"godoc/kr8-jsonnet/#func-nativenetaddresscalcsubnetsv6","text":"func NativeNetAddressCalcSubnetsV6() *jsonnet.NativeFunction Return a list of networks of a given masklen that can be extracted from an IPv6 CIDR. The mask provided must be a larger-integer than the current mask. If set to 0 Subnet carves the network in half. Hostmask must be provided if desired. Inputs: \"ip6Net\", \"netMaskLen\", \"hostMaskLen\".","title":"func NativeNetAddressCalcSubnetsV6"},{"location":"godoc/kr8-jsonnet/#func-nativenetaddresscompare","text":"func NativeNetAddressCompare() *jsonnet.NativeFunction Compare two addresses. 0 if a==b, -1 if a\\<b, 1 if a>b.","title":"func NativeNetAddressCompare"},{"location":"godoc/kr8-jsonnet/#func-nativenetaddressdec","text":"func NativeNetAddressDec() *jsonnet.NativeFunction PreviousIP returns a net.IP decremented by one from the input address. If you underflow the IP space the zero address is returned. Inputs: \"rawIP\".","title":"func NativeNetAddressDec"},{"location":"godoc/kr8-jsonnet/#func-nativenetaddressdecby","text":"func NativeNetAddressDecBy() *jsonnet.NativeFunction Returns a net.IP that is lower than the supplied net.IP by the supplied integer value. If you underflow the IP space the zero address is returned. Inputs: \"rawIP\", \"count\".","title":"func NativeNetAddressDecBy"},{"location":"godoc/kr8-jsonnet/#func-nativenetaddressdelta","text":"func NativeNetAddressDelta() *jsonnet.NativeFunction Gets the delta of two addresses. Takes two net.IP's as input and returns the difference between them up to the limit of uint32. Inputs: \"rawIP, \"otherIP\".","title":"func NativeNetAddressDelta"},{"location":"godoc/kr8-jsonnet/#func-nativenetaddresshex","text":"func NativeNetAddressHex() *jsonnet.NativeFunction Return hex representation of address. This is the default stringer format for v6 net.IP. Inputs: \"rawIP\".","title":"func NativeNetAddressHex"},{"location":"godoc/kr8-jsonnet/#func-nativenetaddressinc","text":"func NativeNetAddressInc() *jsonnet.NativeFunction NextIP returns a net.IP incremented by one from the input address. If you overflow the IP space the all-ones address is returned. Inputs: \"rawIP\".","title":"func NativeNetAddressInc"},{"location":"godoc/kr8-jsonnet/#func-nativenetaddressincby","text":"func NativeNetAddressIncBy() *jsonnet.NativeFunction Returns a net.IP that is greater than the supplied net.IP by the supplied integer value. If you overflow the IP space the all-ones address is returned. Inputs: \"rawIP\", \"count\".","title":"func NativeNetAddressIncBy"},{"location":"godoc/kr8-jsonnet/#func-nativenetaddressnetsbetween","text":"func NativeNetAddressNetsBetween() *jsonnet.NativeFunction Returns a slice of netblocks spanning the range between the two networks, inclusively. Returns single-address netblocks if required. Inputs: \"ipNet\", \"otherIPNet\".","title":"func NativeNetAddressNetsBetween"},{"location":"godoc/kr8-jsonnet/#func-nativenetaddresssort","text":"func NativeNetAddressSort() *jsonnet.NativeFunction Sort list of ip addresses. Inputs: \"listIPs\".","title":"func NativeNetAddressSort"},{"location":"godoc/kr8-jsonnet/#func-nativenetipinfo","text":"func NativeNetIPInfo() *jsonnet.NativeFunction net.IP tools. https://github.com/c-robinson/iplib . Inputs: \"rawIP\".","title":"func NativeNetIPInfo"},{"location":"godoc/kr8-jsonnet/#func-nativeneturl","text":"func NativeNetUrl() *jsonnet.NativeFunction Decode URL information from a string. Based on https://github.com/lintnet/go-jsonnet-native-functions/blob/main/pkg/net/url/url.go . Inputs: \"rawURL\".","title":"func NativeNetUrl"},{"location":"godoc/kr8-jsonnet/#func-nativeregexescape","text":"func NativeRegexEscape() *jsonnet.NativeFunction Escapes a string for use in regex. Inputs: \"str\".","title":"func NativeRegexEscape"},{"location":"godoc/kr8-jsonnet/#func-nativeregexmatch","text":"func NativeRegexMatch() *jsonnet.NativeFunction Matches a string against a regex pattern. Inputs: \"regex\", \"string\".","title":"func NativeRegexMatch"},{"location":"godoc/kr8-jsonnet/#func-nativeregexsubst","text":"func NativeRegexSubst() *jsonnet.NativeFunction Substitutes a regex pattern in a string with another string. Inputs: \"regex\", \"src\", \"repl\".","title":"func NativeRegexSubst"},{"location":"godoc/kr8-jsonnet/#func-nativesprigtemplate","text":"func NativeSprigTemplate() *jsonnet.NativeFunction Uses sprig to process passed in config data and template. Sprig template guide: https://masterminds.github.io/sprig/ . Inputs: \"config\" \"templateStr\".","title":"func NativeSprigTemplate"},{"location":"godoc/kr8-jsonnet/#func-registernativefuncs","text":"func RegisterNativeFuncs(jvm *jsonnet.VM) Registers additional native functions in the jsonnet VM. These functions are used to extend the functionality of jsonnet. Adds on to functions part of the jsonnet stdlib: https://jsonnet.org/ref/stdlib.html","title":"func RegisterNativeFuncs"},{"location":"godoc/kr8-jsonnet/#type-ipv4","text":"type IPV4 struct { IP string Mask int CIDR string Count uint32 FirstAddress string LastAddress string Broadcast string }","title":"type IPV4"},{"location":"godoc/kr8-jsonnet/#func-ipv4info","text":"func IPV4Info(rawIP string) (*IPV4, error)","title":"func IPV4Info"},{"location":"godoc/kr8-jsonnet/#type-ipv6","text":"type IPV6 struct { IP string NetMask string HostMask string CIDR string Count uint128.Uint128 FirstAddress string LastAddress string }","title":"type IPV6"},{"location":"godoc/kr8-jsonnet/#func-ipv6info","text":"func IPV6Info(rawIP string) (*IPV6, error)","title":"func IPV6Info"},{"location":"godoc/kr8-jsonnet/#type-nativefuncurl","text":"Contains the url information. type NativeFuncURL struct { Scheme string // encoded opaque data Opaque string // username information Username string // Whether the password field is set PasswordSet bool // password information Password string // host or host:port (see Hostname and Port methods) Host string // path (relative paths may omit leading slash) Path string // encoded path hint (see EscapedPath method) RawPath string // query values Query map[string]interface{} // encoded query values, without '?' RawQuery string // fragment for references, without '#' Fragment string // encoded fragment hint (see EscapedFragment method) RawFragment string }","title":"type NativeFuncURL"},{"location":"godoc/kr8-types/","text":"types import \"github.com/ice-bergtech/kr8/pkg/types\" Index func ExtractExtFiles(spec gjson.Result) map[string]string func ExtractJpaths(spec gjson.Result) []string type CmdJsonnetOptions type ExtFileVar type KomposeConvertOptions func Create(inputFiles []string, outDir string, cmp Kr8ComponentJsonnet) *KomposeConvertOptions func (k KomposeConvertOptions) Convert() (interface{}, error) func (k KomposeConvertOptions) GenKomposePkgOpts() *kobject.ConvertOptions func (k KomposeConvertOptions) Validate() error type Kr8Cluster type Kr8ClusterComponentRef type Kr8ClusterJsonnet type Kr8ClusterSpec func CreateClusterSpec(clusterName string, spec gjson.Result, kr8Opts Kr8Opts, genDirOverride string) (Kr8ClusterSpec, error) type Kr8ComponentJsonnet type Kr8ComponentSpec func CreateComponentSpec(spec gjson.Result) (Kr8ComponentSpec, error) type Kr8ComponentSpecIncludeObject type Kr8ComponentSpecIncludes func ExtractIncludes(spec gjson.Result) (Kr8ComponentSpecIncludes, error) func (k *Kr8ComponentSpecIncludes) UnmarshalJSON(data []byte) error type Kr8Error func (e Kr8Error) Error() string type Kr8Opts type VMConfig func ExtractExtFiles func ExtractExtFiles(spec gjson.Result) map[string]string Extract jsonnet extVar defintions from spec. func ExtractJpaths func ExtractJpaths(spec gjson.Result) []string Extract jsonnet lib paths from spec. type CmdJsonnetOptions Options for running the jsonnet command. type CmdJsonnetOptions struct { Prune bool Cluster string ClusterParams string Component string Format string Color bool } type ExtFileVar Map of external files to load into jsonnet vm as external variables. Keys are the variable names, values are the paths to the files to load as strings into the jsonnet vm. To reference the variable in jsonnet code, use std.extvar(\"variable_name\"). type ExtFileVar map[string]string type KomposeConvertOptions A struct describing a compose file to be processed by kompose to produce kubernetes manifests. Based on https://github.com/kubernetes/kompose/blob/main/cmd/convert.go type KomposeConvertOptions struct { // Kubernetes: Set the output controller (\"deployment\"|\"daemonSet\"|\"replicationController\") Controller string // The kubecfg (?) profile to use, can use multiple profiles Profiles []string // List of compose file filenames. // Filenames should be in the format `[docker-]compose.ym[a]l` InputFiles []string // Specify a file name or directory to save objects to. // if path does not exist, a file is created) OutFile string // Generate a Helm chart for converted objects CreateChart bool // Add kompose annotations to generated resource WithKomposeAnnotation bool // Generate resource files into YAML format GenerateYaml bool // Spaces length to indent generated yaml files GenerateYAMLIndent int // Generate resource files into JSON format GenerateJSON bool // Print converted objects to stdout GenerateToStdout bool // Set the type of build (\"local\"|\"build-config\"(OpenShift only)|\"none\") Build string // Specify the namespace of the generated resources`) Namespace string // Specify the number of replicas in the generated resource spec Replicas int // Convert docker-compose secrets into files instead of symlinked directories SecretsAsFiles bool // Use Empty Volumes. Do not generate PVCs EmptyVols bool // Volumes to be generated (\"persistentVolumeClaim\"|\"emptyDir\"|\"hostPath\" | \"configMap\") Volumes string // Specify the size of pvc storage requests in the generated resource spec PVCRequestSize string // Determine whether to generate network policies NetworkPolicies bool // Create multiple containers grouped by 'kompose.service.group' label MultipleContainerMode bool // Group multiple service to create single workload by `label`(`kompose.service.group`) or `volume`(shared volumes) ServiceGroupMode string // Using with --service-group-mode=volume to specific a final service name for the group ServiceGroupName string // ?? Provider string // ?? StoreManifest bool // ?? Server string // OpenShift: ?? OSCreateDeploymentConfig bool // Openshift: Specify source repository for buildconfig (default remote origin) OSBuildRepo string // Openshift: Use an insecure Docker repository for OpenShift ImageStream OSInsecureRepository bool // Openshift: Specify repository branch to use for buildconfig (default master) OSBuildBranch string // Whether to push built docker image to remote registry. ImagePush bool // Command used to build to image. Used with PushCommand ImageBuildCommand string // Command used to push image ImagePushCommand string // Specify registry for pushing image, which overrides the registry derived from image name ImagePushRegistry string } func Create func Create(inputFiles []string, outDir string, cmp Kr8ComponentJsonnet) *KomposeConvertOptions Initialie Kompose options with sensible defaults. func (KomposeConvertOptions) Convert func (k KomposeConvertOptions) Convert() (interface{}, error) Converts a Docker Compose file described by k into a set of kubernetes manifests. func (KomposeConvertOptions) GenKomposePkgOpts func (k KomposeConvertOptions) GenKomposePkgOpts() *kobject.ConvertOptions Generates a ConvertOptions struct that kompose expects from our commented KomposeConvertOptions References: https://pkg.go.dev/github.com/kubernetes/kompose@v1.35.0/pkg/kobject#ConvertOptions https://github.com/kubernetes/kompose/blob/v1.35.0/pkg/app/app.go#L166 func (KomposeConvertOptions) Validate func (k KomposeConvertOptions) Validate() error Validates a set of options for converting a Kubernetes manifest to a Docker Compose file. type Kr8Cluster An object that stores variables that can be referenced by components. type Kr8Cluster struct { Name string `json:\"name\"` Path string `json:\"-\"` } type Kr8ClusterComponentRef A reference to a component folder that contains a params.jsonnet file. This is used in the cluster jsonnet file to reference components. type Kr8ClusterComponentRef struct { // The path to a component folder that contains a params.jsonnet file Path string `json:\"path\"` } type Kr8ClusterJsonnet The specification for a clusters.jsonnet file. This describes configuration for a cluster that kr8 should process. type Kr8ClusterJsonnet struct { // kr8 configuration for how to process the cluster ClusterSpec Kr8ClusterSpec `json:\"_kr8_spec\"` // Cluster Level configuration that components can reference Cluster Kr8Cluster `json:\"_cluster\"` // Distinctly named components. Components map[string]Kr8ClusterComponentRef `json:\"_components\"` } type Kr8ClusterSpec The specification for how to process a cluster. This is used in the cluster jsonnet file to configure how kr8 should process the cluster. type Kr8ClusterSpec struct { // The name of the cluster Name string `json:\"-\"` // A jsonnet function that each output entry is processed through. Default `function(input) input` PostProcessor string `json:\"postprocessor\"` // The name of the root generate directory. Default `generated` GenerateDir string `json:\"generate_dir\"` // if this is true, we don't use the full file path to generate output file names GenerateShortNames bool `json:\"generate_short_names\"` // if this is true, we prune component parameters PruneParams bool `json:\"prune_params\"` // Additional information used to process the cluster that is not stored with it. // Cluster output directory ClusterOutputDir string `json:\"-\"` } func CreateClusterSpec func CreateClusterSpec(clusterName string, spec gjson.Result, kr8Opts Kr8Opts, genDirOverride string) (Kr8ClusterSpec, error) This function creates a Kr8ClusterSpec from passed params. If genDirOverride is empty, the value of generate_dir from the spec is used. type Kr8ComponentJsonnet The specification for component's params.jsonnet file. It contains all the configuration and variables used to generate component resources. This configuration is often modified from the cluster config to add cluster-specific configuration. type Kr8ComponentJsonnet struct { // Component-specific configuration for how kr8 should process the component (required) Kr8Spec Kr8ComponentSpec `json:\"kr8_spec\"` // The default namespace to deploy the component to Namespace string `json:\"namespace\"` // A unique name for the component ReleaseName string `json:\"release_name\"` // Component version string (optional) Version string `json:\"version\"` // Relative directory where the component's resources are located (required). // Usually std.thisFile. CalledFrom string `json:\"called_from\"` } type Kr8ComponentSpec The kr8_spec object in a cluster config file. This configures how kr8 processes the component. type Kr8ComponentSpec struct { // If true, includes the parameters of the current cluster when generating this component Kr8_allparams bool `json:\"enable_kr8_allparams\"` // If true, includes the parameters of all other clusters when generating this component Kr8_allclusters bool `json:\"enable_kr8_allclusters\"` // If false, all non-generated files present in the output directory are removed DisableOutputDirClean bool `json:\"disable_output_clean\"` // A list of filenames to include as jsonnet vm external vars ExtFiles ExtFileVar `json:\"extfiles\"` // Additional jsonnet libs to the jsonnet vm, component-path scoped JPaths []string `json:\"jpaths\"` // A list of filenames to include and output as files Includes Kr8ComponentSpecIncludes `json:\"includes\"` } func CreateComponentSpec func CreateComponentSpec(spec gjson.Result) (Kr8ComponentSpec, error) Extracts a component spec from a jsonnet object. type Kr8ComponentSpecIncludeObject An includes object which configures how kr8 includes an object. It allows configuring the included file's destination directory and file name. The input files are processed differently depending on the filetype. type Kr8ComponentSpecIncludeObject struct { // an input file to process // accepted filetypes: .jsonnet .yml .yaml .tmpl .tpl File string `json:\"file\"` // handle alternate output directory for file DestDir string `json:\"dest_dir,omitempty\"` // override destination file name DestName string `json:\"dest_name,omitempty\"` // override destination file extension DestExt string `json:\"dest_ext,omitempty\"` } type Kr8ComponentSpecIncludes Define Kr8ComponentSpecIncludes to handle dynamic decoding. type Kr8ComponentSpecIncludes []Kr8ComponentSpecIncludeObject func ExtractIncludes func ExtractIncludes(spec gjson.Result) (Kr8ComponentSpecIncludes, error) Extract jsonnet includes filenames or objects from spec. func (*Kr8ComponentSpecIncludes) UnmarshalJSON func (k *Kr8ComponentSpecIncludes) UnmarshalJSON(data []byte) error Implement custom unmarshaling for dynamic decoding. type Kr8Error type Kr8Error struct { Message string Value interface{} } func (Kr8Error) Error func (e Kr8Error) Error() string Error implements error. type Kr8Opts type Kr8Opts struct { // Base directory of kr8 configuration BaseDir string // Directory where component definitions are stored ComponentDir string // Directory where cluster configurations are stored ClusterDir string } type VMConfig VMConfig describes configuration to initialize the Jsonnet VM with. type VMConfig struct { // Jpaths is a list of paths to search for Jsonnet libraries (libsonnet files) Jpaths []string `json:\"jpath\" yaml:\"jpath\"` // ExtVars is a list of external variables to pass to Jsonnet VM ExtVars []string `json:\"ext_str_file\" yaml:\"ext_str_files\"` // base directory for the project BaseDir string `json:\"base_dir\" yaml:\"base_dir\"` }","title":"kr8 types"},{"location":"godoc/kr8-types/#types","text":"import \"github.com/ice-bergtech/kr8/pkg/types\"","title":"types"},{"location":"godoc/kr8-types/#index","text":"func ExtractExtFiles(spec gjson.Result) map[string]string func ExtractJpaths(spec gjson.Result) []string type CmdJsonnetOptions type ExtFileVar type KomposeConvertOptions func Create(inputFiles []string, outDir string, cmp Kr8ComponentJsonnet) *KomposeConvertOptions func (k KomposeConvertOptions) Convert() (interface{}, error) func (k KomposeConvertOptions) GenKomposePkgOpts() *kobject.ConvertOptions func (k KomposeConvertOptions) Validate() error type Kr8Cluster type Kr8ClusterComponentRef type Kr8ClusterJsonnet type Kr8ClusterSpec func CreateClusterSpec(clusterName string, spec gjson.Result, kr8Opts Kr8Opts, genDirOverride string) (Kr8ClusterSpec, error) type Kr8ComponentJsonnet type Kr8ComponentSpec func CreateComponentSpec(spec gjson.Result) (Kr8ComponentSpec, error) type Kr8ComponentSpecIncludeObject type Kr8ComponentSpecIncludes func ExtractIncludes(spec gjson.Result) (Kr8ComponentSpecIncludes, error) func (k *Kr8ComponentSpecIncludes) UnmarshalJSON(data []byte) error type Kr8Error func (e Kr8Error) Error() string type Kr8Opts type VMConfig","title":"Index"},{"location":"godoc/kr8-types/#func-extractextfiles","text":"func ExtractExtFiles(spec gjson.Result) map[string]string Extract jsonnet extVar defintions from spec.","title":"func ExtractExtFiles"},{"location":"godoc/kr8-types/#func-extractjpaths","text":"func ExtractJpaths(spec gjson.Result) []string Extract jsonnet lib paths from spec.","title":"func ExtractJpaths"},{"location":"godoc/kr8-types/#type-cmdjsonnetoptions","text":"Options for running the jsonnet command. type CmdJsonnetOptions struct { Prune bool Cluster string ClusterParams string Component string Format string Color bool }","title":"type CmdJsonnetOptions"},{"location":"godoc/kr8-types/#type-extfilevar","text":"Map of external files to load into jsonnet vm as external variables. Keys are the variable names, values are the paths to the files to load as strings into the jsonnet vm. To reference the variable in jsonnet code, use std.extvar(\"variable_name\"). type ExtFileVar map[string]string","title":"type ExtFileVar"},{"location":"godoc/kr8-types/#type-komposeconvertoptions","text":"A struct describing a compose file to be processed by kompose to produce kubernetes manifests. Based on https://github.com/kubernetes/kompose/blob/main/cmd/convert.go type KomposeConvertOptions struct { // Kubernetes: Set the output controller (\"deployment\"|\"daemonSet\"|\"replicationController\") Controller string // The kubecfg (?) profile to use, can use multiple profiles Profiles []string // List of compose file filenames. // Filenames should be in the format `[docker-]compose.ym[a]l` InputFiles []string // Specify a file name or directory to save objects to. // if path does not exist, a file is created) OutFile string // Generate a Helm chart for converted objects CreateChart bool // Add kompose annotations to generated resource WithKomposeAnnotation bool // Generate resource files into YAML format GenerateYaml bool // Spaces length to indent generated yaml files GenerateYAMLIndent int // Generate resource files into JSON format GenerateJSON bool // Print converted objects to stdout GenerateToStdout bool // Set the type of build (\"local\"|\"build-config\"(OpenShift only)|\"none\") Build string // Specify the namespace of the generated resources`) Namespace string // Specify the number of replicas in the generated resource spec Replicas int // Convert docker-compose secrets into files instead of symlinked directories SecretsAsFiles bool // Use Empty Volumes. Do not generate PVCs EmptyVols bool // Volumes to be generated (\"persistentVolumeClaim\"|\"emptyDir\"|\"hostPath\" | \"configMap\") Volumes string // Specify the size of pvc storage requests in the generated resource spec PVCRequestSize string // Determine whether to generate network policies NetworkPolicies bool // Create multiple containers grouped by 'kompose.service.group' label MultipleContainerMode bool // Group multiple service to create single workload by `label`(`kompose.service.group`) or `volume`(shared volumes) ServiceGroupMode string // Using with --service-group-mode=volume to specific a final service name for the group ServiceGroupName string // ?? Provider string // ?? StoreManifest bool // ?? Server string // OpenShift: ?? OSCreateDeploymentConfig bool // Openshift: Specify source repository for buildconfig (default remote origin) OSBuildRepo string // Openshift: Use an insecure Docker repository for OpenShift ImageStream OSInsecureRepository bool // Openshift: Specify repository branch to use for buildconfig (default master) OSBuildBranch string // Whether to push built docker image to remote registry. ImagePush bool // Command used to build to image. Used with PushCommand ImageBuildCommand string // Command used to push image ImagePushCommand string // Specify registry for pushing image, which overrides the registry derived from image name ImagePushRegistry string }","title":"type KomposeConvertOptions"},{"location":"godoc/kr8-types/#func-create","text":"func Create(inputFiles []string, outDir string, cmp Kr8ComponentJsonnet) *KomposeConvertOptions Initialie Kompose options with sensible defaults.","title":"func Create"},{"location":"godoc/kr8-types/#func-komposeconvertoptions-convert","text":"func (k KomposeConvertOptions) Convert() (interface{}, error) Converts a Docker Compose file described by k into a set of kubernetes manifests.","title":"func (KomposeConvertOptions) Convert"},{"location":"godoc/kr8-types/#func-komposeconvertoptions-genkomposepkgopts","text":"func (k KomposeConvertOptions) GenKomposePkgOpts() *kobject.ConvertOptions Generates a ConvertOptions struct that kompose expects from our commented KomposeConvertOptions References: https://pkg.go.dev/github.com/kubernetes/kompose@v1.35.0/pkg/kobject#ConvertOptions https://github.com/kubernetes/kompose/blob/v1.35.0/pkg/app/app.go#L166","title":"func (KomposeConvertOptions) GenKomposePkgOpts"},{"location":"godoc/kr8-types/#func-komposeconvertoptions-validate","text":"func (k KomposeConvertOptions) Validate() error Validates a set of options for converting a Kubernetes manifest to a Docker Compose file.","title":"func (KomposeConvertOptions) Validate"},{"location":"godoc/kr8-types/#type-kr8cluster","text":"An object that stores variables that can be referenced by components. type Kr8Cluster struct { Name string `json:\"name\"` Path string `json:\"-\"` }","title":"type Kr8Cluster"},{"location":"godoc/kr8-types/#type-kr8clustercomponentref","text":"A reference to a component folder that contains a params.jsonnet file. This is used in the cluster jsonnet file to reference components. type Kr8ClusterComponentRef struct { // The path to a component folder that contains a params.jsonnet file Path string `json:\"path\"` }","title":"type Kr8ClusterComponentRef"},{"location":"godoc/kr8-types/#type-kr8clusterjsonnet","text":"The specification for a clusters.jsonnet file. This describes configuration for a cluster that kr8 should process. type Kr8ClusterJsonnet struct { // kr8 configuration for how to process the cluster ClusterSpec Kr8ClusterSpec `json:\"_kr8_spec\"` // Cluster Level configuration that components can reference Cluster Kr8Cluster `json:\"_cluster\"` // Distinctly named components. Components map[string]Kr8ClusterComponentRef `json:\"_components\"` }","title":"type Kr8ClusterJsonnet"},{"location":"godoc/kr8-types/#type-kr8clusterspec","text":"The specification for how to process a cluster. This is used in the cluster jsonnet file to configure how kr8 should process the cluster. type Kr8ClusterSpec struct { // The name of the cluster Name string `json:\"-\"` // A jsonnet function that each output entry is processed through. Default `function(input) input` PostProcessor string `json:\"postprocessor\"` // The name of the root generate directory. Default `generated` GenerateDir string `json:\"generate_dir\"` // if this is true, we don't use the full file path to generate output file names GenerateShortNames bool `json:\"generate_short_names\"` // if this is true, we prune component parameters PruneParams bool `json:\"prune_params\"` // Additional information used to process the cluster that is not stored with it. // Cluster output directory ClusterOutputDir string `json:\"-\"` }","title":"type Kr8ClusterSpec"},{"location":"godoc/kr8-types/#func-createclusterspec","text":"func CreateClusterSpec(clusterName string, spec gjson.Result, kr8Opts Kr8Opts, genDirOverride string) (Kr8ClusterSpec, error) This function creates a Kr8ClusterSpec from passed params. If genDirOverride is empty, the value of generate_dir from the spec is used.","title":"func CreateClusterSpec"},{"location":"godoc/kr8-types/#type-kr8componentjsonnet","text":"The specification for component's params.jsonnet file. It contains all the configuration and variables used to generate component resources. This configuration is often modified from the cluster config to add cluster-specific configuration. type Kr8ComponentJsonnet struct { // Component-specific configuration for how kr8 should process the component (required) Kr8Spec Kr8ComponentSpec `json:\"kr8_spec\"` // The default namespace to deploy the component to Namespace string `json:\"namespace\"` // A unique name for the component ReleaseName string `json:\"release_name\"` // Component version string (optional) Version string `json:\"version\"` // Relative directory where the component's resources are located (required). // Usually std.thisFile. CalledFrom string `json:\"called_from\"` }","title":"type Kr8ComponentJsonnet"},{"location":"godoc/kr8-types/#type-kr8componentspec","text":"The kr8_spec object in a cluster config file. This configures how kr8 processes the component. type Kr8ComponentSpec struct { // If true, includes the parameters of the current cluster when generating this component Kr8_allparams bool `json:\"enable_kr8_allparams\"` // If true, includes the parameters of all other clusters when generating this component Kr8_allclusters bool `json:\"enable_kr8_allclusters\"` // If false, all non-generated files present in the output directory are removed DisableOutputDirClean bool `json:\"disable_output_clean\"` // A list of filenames to include as jsonnet vm external vars ExtFiles ExtFileVar `json:\"extfiles\"` // Additional jsonnet libs to the jsonnet vm, component-path scoped JPaths []string `json:\"jpaths\"` // A list of filenames to include and output as files Includes Kr8ComponentSpecIncludes `json:\"includes\"` }","title":"type Kr8ComponentSpec"},{"location":"godoc/kr8-types/#func-createcomponentspec","text":"func CreateComponentSpec(spec gjson.Result) (Kr8ComponentSpec, error) Extracts a component spec from a jsonnet object.","title":"func CreateComponentSpec"},{"location":"godoc/kr8-types/#type-kr8componentspecincludeobject","text":"An includes object which configures how kr8 includes an object. It allows configuring the included file's destination directory and file name. The input files are processed differently depending on the filetype. type Kr8ComponentSpecIncludeObject struct { // an input file to process // accepted filetypes: .jsonnet .yml .yaml .tmpl .tpl File string `json:\"file\"` // handle alternate output directory for file DestDir string `json:\"dest_dir,omitempty\"` // override destination file name DestName string `json:\"dest_name,omitempty\"` // override destination file extension DestExt string `json:\"dest_ext,omitempty\"` }","title":"type Kr8ComponentSpecIncludeObject"},{"location":"godoc/kr8-types/#type-kr8componentspecincludes","text":"Define Kr8ComponentSpecIncludes to handle dynamic decoding. type Kr8ComponentSpecIncludes []Kr8ComponentSpecIncludeObject","title":"type Kr8ComponentSpecIncludes"},{"location":"godoc/kr8-types/#func-extractincludes","text":"func ExtractIncludes(spec gjson.Result) (Kr8ComponentSpecIncludes, error) Extract jsonnet includes filenames or objects from spec.","title":"func ExtractIncludes"},{"location":"godoc/kr8-types/#func-kr8componentspecincludes-unmarshaljson","text":"func (k *Kr8ComponentSpecIncludes) UnmarshalJSON(data []byte) error Implement custom unmarshaling for dynamic decoding.","title":"func (*Kr8ComponentSpecIncludes) UnmarshalJSON"},{"location":"godoc/kr8-types/#type-kr8error","text":"type Kr8Error struct { Message string Value interface{} }","title":"type Kr8Error"},{"location":"godoc/kr8-types/#func-kr8error-error","text":"func (e Kr8Error) Error() string Error implements error.","title":"func (Kr8Error) Error"},{"location":"godoc/kr8-types/#type-kr8opts","text":"type Kr8Opts struct { // Base directory of kr8 configuration BaseDir string // Directory where component definitions are stored ComponentDir string // Directory where cluster configurations are stored ClusterDir string }","title":"type Kr8Opts"},{"location":"godoc/kr8-types/#type-vmconfig","text":"VMConfig describes configuration to initialize the Jsonnet VM with. type VMConfig struct { // Jpaths is a list of paths to search for Jsonnet libraries (libsonnet files) Jpaths []string `json:\"jpath\" yaml:\"jpath\"` // ExtVars is a list of external variables to pass to Jsonnet VM ExtVars []string `json:\"ext_str_file\" yaml:\"ext_str_files\"` // base directory for the project BaseDir string `json:\"base_dir\" yaml:\"base_dir\"` }","title":"type VMConfig"},{"location":"godoc/kr8-util/","text":"util import \"github.com/ice-bergtech/kr8/pkg/util\" Utility functions for directories and files Package util contains utility functions for various tasks. It includes functions for formatting JSON, writing to files, directory management, and go control-flow helpers Index func CalculateClusterIncludesExcludes(input map[string]string, filters PathFilterOptions) []string func CheckObjectMatch(input gjson.Result, filterString string) bool func CleanOutputDir(outputFileMap map[string]bool, componentOutputDir string) error func Colorize(input interface{}, colorNum int, disabled bool) string func FatalErrorCheck(message string, err error) func FetchRepoUrl(url string, destination string, noop bool) error func Filter(vs []string, f func(string) bool) []string func FilterItems(input map[string]string, pfilter PathFilterOptions) []string func FormatJsonnetString(input string) (string, error) func FormatJsonnetStringCustom(input string, opts formatter.Options) (string, error) func GenErrorIfCheck(message string, err error) error func GetClusterFilenames(searchDir string) ([]types.Kr8Cluster, error) func GetClusterParamsFilenames(basePath string, targetPath string) []string func GetClusterPaths(searchDir string, clusterName string) (string, error) func GetDefaultFormatOptions() formatter.Options func JsonnetPrint(output string, format string, color bool) error func Pretty(inputJson string, colorOutput bool) (string, error) func WriteObjToJsonFile(filename string, path string, objStruct interface{}) (string, error) type PathFilterOptions func CalculateClusterIncludesExcludes func CalculateClusterIncludesExcludes(input map[string]string, filters PathFilterOptions) []string Using the allClusterParams variable and command flags to create a list of clusters to generate. Clusters can be filtered with \"=\" for equality or \"\\~\" for regex match. func CheckObjectMatch func CheckObjectMatch(input gjson.Result, filterString string) bool Checks if a input object matches a filter string. The filter string can be an equality match or a regex match. func CleanOutputDir func CleanOutputDir(outputFileMap map[string]bool, componentOutputDir string) error Given a map of filenames, prunes all *.yaml files that are NOT in the map from the directory. func Colorize func Colorize(input interface{}, colorNum int, disabled bool) string Colorize function from zerolog console.go file to replicate their coloring functionality. Source: https://github.com/rs/zerolog/blob/a21d6107dcda23e36bc5cfd00ce8fdbe8f3ddc23/console.go#L389 Replicated here because it's a private function. func FatalErrorCheck func FatalErrorCheck(message string, err error) Logs an error and exits the program if the error is not nil. Saves 3 lines per use and centralizes fatal errors for rewriting. func FetchRepoUrl func FetchRepoUrl(url string, destination string, noop bool) error Fetch a git repo from a url and clone it to a destination directory. If the noop flag is true, it print commands to fetch manually without doing anything. func Filter func Filter(vs []string, f func(string) bool) []string Filter returns a new slice containing only the elements that satisfy the predicate function. From https://gobyexample.com/collection-functions func FilterItems func FilterItems(input map[string]string, pfilter PathFilterOptions) []string Given a map of string, filter them based on the provided options. The map value is parsed as a gjson result and then checked against the provided options. func FormatJsonnetString func FormatJsonnetString(input string) (string, error) Formats a jsonnet string using the default options. func FormatJsonnetStringCustom func FormatJsonnetStringCustom(input string, opts formatter.Options) (string, error) Formats a jsonnet string using custom options. func GenErrorIfCheck func GenErrorIfCheck(message string, err error) error func GetClusterFilenames func GetClusterFilenames(searchDir string) ([]types.Kr8Cluster, error) Get a list of cluster from within a directory. Walks the directory tree, creating a types.Kr8Cluster for each cluster.jsonnet file found. func GetClusterParamsFilenames func GetClusterParamsFilenames(basePath string, targetPath string) []string Get all cluster parameters within a directory. Walks through the directory hierarchy and returns all paths to `params.jsonnet` files. func GetClusterPaths func GetClusterPaths(searchDir string, clusterName string) (string, error) Get a specific cluster within a directory by name. Walks the cluster directory searching for the given clusterName. Returns the path to the cluster. func GetDefaultFormatOptions func GetDefaultFormatOptions() formatter.Options Configures the default options for the jsonnet formatter. func JsonnetPrint func JsonnetPrint(output string, format string, color bool) error Print the jsonnet in the specified format. Acceptable formats are: yaml, stream, json. func Pretty func Pretty(inputJson string, colorOutput bool) (string, error) Pretty formats the input jsonnet string with indentation and optional color output. Returns an error when the input can't properly format the json string input. func WriteObjToJsonFile func WriteObjToJsonFile(filename string, path string, objStruct interface{}) (string, error) Write out a struct to a specified path and file. Marshals the given interface and generates a formatted json string. All parent directories needed are created. type PathFilterOptions Fill with string to include and exclude, using kr8's special parsing. type PathFilterOptions struct { // Comma-separated list of include filters // Filters can include: // // regex filters using the \"~\" operator. For example, \"name~^myregex$\" // equality matches using the \"=\" operator. For example, \"name=myvalue\" // substring matches using the \"=\" operator. For example, \"name=myvalue\" // // If no operator is provided, it is treated as a substring match against the \"name\" field. Includes string // Comma-separated list of exclude filters. // Filters can include: // // regex filters using the \"~\" operator. For example, \"name~^myregex$\" // equality matches using the \"=\" operator. For example, \"name=myvalue\" // substring matches using the \"=\" operator. For example, \"name=myvalue\" // // If no operator is provided, it is treated as a substring match against the \"name\" field. Excludes string // Comma separated cluster names. // Filters keys on exact match. Clusters string // Comma separated component names. Components string }","title":"kr8 util"},{"location":"godoc/kr8-util/#util","text":"import \"github.com/ice-bergtech/kr8/pkg/util\" Utility functions for directories and files Package util contains utility functions for various tasks. It includes functions for formatting JSON, writing to files, directory management, and go control-flow helpers","title":"util"},{"location":"godoc/kr8-util/#index","text":"func CalculateClusterIncludesExcludes(input map[string]string, filters PathFilterOptions) []string func CheckObjectMatch(input gjson.Result, filterString string) bool func CleanOutputDir(outputFileMap map[string]bool, componentOutputDir string) error func Colorize(input interface{}, colorNum int, disabled bool) string func FatalErrorCheck(message string, err error) func FetchRepoUrl(url string, destination string, noop bool) error func Filter(vs []string, f func(string) bool) []string func FilterItems(input map[string]string, pfilter PathFilterOptions) []string func FormatJsonnetString(input string) (string, error) func FormatJsonnetStringCustom(input string, opts formatter.Options) (string, error) func GenErrorIfCheck(message string, err error) error func GetClusterFilenames(searchDir string) ([]types.Kr8Cluster, error) func GetClusterParamsFilenames(basePath string, targetPath string) []string func GetClusterPaths(searchDir string, clusterName string) (string, error) func GetDefaultFormatOptions() formatter.Options func JsonnetPrint(output string, format string, color bool) error func Pretty(inputJson string, colorOutput bool) (string, error) func WriteObjToJsonFile(filename string, path string, objStruct interface{}) (string, error) type PathFilterOptions","title":"Index"},{"location":"godoc/kr8-util/#func-calculateclusterincludesexcludes","text":"func CalculateClusterIncludesExcludes(input map[string]string, filters PathFilterOptions) []string Using the allClusterParams variable and command flags to create a list of clusters to generate. Clusters can be filtered with \"=\" for equality or \"\\~\" for regex match.","title":"func CalculateClusterIncludesExcludes"},{"location":"godoc/kr8-util/#func-checkobjectmatch","text":"func CheckObjectMatch(input gjson.Result, filterString string) bool Checks if a input object matches a filter string. The filter string can be an equality match or a regex match.","title":"func CheckObjectMatch"},{"location":"godoc/kr8-util/#func-cleanoutputdir","text":"func CleanOutputDir(outputFileMap map[string]bool, componentOutputDir string) error Given a map of filenames, prunes all *.yaml files that are NOT in the map from the directory.","title":"func CleanOutputDir"},{"location":"godoc/kr8-util/#func-colorize","text":"func Colorize(input interface{}, colorNum int, disabled bool) string Colorize function from zerolog console.go file to replicate their coloring functionality. Source: https://github.com/rs/zerolog/blob/a21d6107dcda23e36bc5cfd00ce8fdbe8f3ddc23/console.go#L389 Replicated here because it's a private function.","title":"func Colorize"},{"location":"godoc/kr8-util/#func-fatalerrorcheck","text":"func FatalErrorCheck(message string, err error) Logs an error and exits the program if the error is not nil. Saves 3 lines per use and centralizes fatal errors for rewriting.","title":"func FatalErrorCheck"},{"location":"godoc/kr8-util/#func-fetchrepourl","text":"func FetchRepoUrl(url string, destination string, noop bool) error Fetch a git repo from a url and clone it to a destination directory. If the noop flag is true, it print commands to fetch manually without doing anything.","title":"func FetchRepoUrl"},{"location":"godoc/kr8-util/#func-filter","text":"func Filter(vs []string, f func(string) bool) []string Filter returns a new slice containing only the elements that satisfy the predicate function. From https://gobyexample.com/collection-functions","title":"func Filter"},{"location":"godoc/kr8-util/#func-filteritems","text":"func FilterItems(input map[string]string, pfilter PathFilterOptions) []string Given a map of string, filter them based on the provided options. The map value is parsed as a gjson result and then checked against the provided options.","title":"func FilterItems"},{"location":"godoc/kr8-util/#func-formatjsonnetstring","text":"func FormatJsonnetString(input string) (string, error) Formats a jsonnet string using the default options.","title":"func FormatJsonnetString"},{"location":"godoc/kr8-util/#func-formatjsonnetstringcustom","text":"func FormatJsonnetStringCustom(input string, opts formatter.Options) (string, error) Formats a jsonnet string using custom options.","title":"func FormatJsonnetStringCustom"},{"location":"godoc/kr8-util/#func-generrorifcheck","text":"func GenErrorIfCheck(message string, err error) error","title":"func GenErrorIfCheck"},{"location":"godoc/kr8-util/#func-getclusterfilenames","text":"func GetClusterFilenames(searchDir string) ([]types.Kr8Cluster, error) Get a list of cluster from within a directory. Walks the directory tree, creating a types.Kr8Cluster for each cluster.jsonnet file found.","title":"func GetClusterFilenames"},{"location":"godoc/kr8-util/#func-getclusterparamsfilenames","text":"func GetClusterParamsFilenames(basePath string, targetPath string) []string Get all cluster parameters within a directory. Walks through the directory hierarchy and returns all paths to `params.jsonnet` files.","title":"func GetClusterParamsFilenames"},{"location":"godoc/kr8-util/#func-getclusterpaths","text":"func GetClusterPaths(searchDir string, clusterName string) (string, error) Get a specific cluster within a directory by name. Walks the cluster directory searching for the given clusterName. Returns the path to the cluster.","title":"func GetClusterPaths"},{"location":"godoc/kr8-util/#func-getdefaultformatoptions","text":"func GetDefaultFormatOptions() formatter.Options Configures the default options for the jsonnet formatter.","title":"func GetDefaultFormatOptions"},{"location":"godoc/kr8-util/#func-jsonnetprint","text":"func JsonnetPrint(output string, format string, color bool) error Print the jsonnet in the specified format. Acceptable formats are: yaml, stream, json.","title":"func JsonnetPrint"},{"location":"godoc/kr8-util/#func-pretty","text":"func Pretty(inputJson string, colorOutput bool) (string, error) Pretty formats the input jsonnet string with indentation and optional color output. Returns an error when the input can't properly format the json string input.","title":"func Pretty"},{"location":"godoc/kr8-util/#func-writeobjtojsonfile","text":"func WriteObjToJsonFile(filename string, path string, objStruct interface{}) (string, error) Write out a struct to a specified path and file. Marshals the given interface and generates a formatted json string. All parent directories needed are created.","title":"func WriteObjToJsonFile"},{"location":"godoc/kr8-util/#type-pathfilteroptions","text":"Fill with string to include and exclude, using kr8's special parsing. type PathFilterOptions struct { // Comma-separated list of include filters // Filters can include: // // regex filters using the \"~\" operator. For example, \"name~^myregex$\" // equality matches using the \"=\" operator. For example, \"name=myvalue\" // substring matches using the \"=\" operator. For example, \"name=myvalue\" // // If no operator is provided, it is treated as a substring match against the \"name\" field. Includes string // Comma-separated list of exclude filters. // Filters can include: // // regex filters using the \"~\" operator. For example, \"name~^myregex$\" // equality matches using the \"=\" operator. For example, \"name=myvalue\" // substring matches using the \"=\" operator. For example, \"name=myvalue\" // // If no operator is provided, it is treated as a substring match against the \"name\" field. Excludes string // Comma separated cluster names. // Filters keys on exact match. Clusters string // Comma separated component names. Components string }","title":"type PathFilterOptions"}]}